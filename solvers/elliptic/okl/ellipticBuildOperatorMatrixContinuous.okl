/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


#define tol 1e-12

//non-zero matrix entries
typedef struct  {
  hlong row;
  hlong col;
  dfloat val;
} nonZero_t;

// need definition of nonZero_t

@kernel void ellipticBuildOperatorMatrixContinuousTri2D(const dlong Nelements,
							const hlong  *maskedGlobalNumbering,
							const dlong  *rowMap,
							const dlong  *colMap,
							const dfloat *S,
							const dfloat *MM,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL){
  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Np];
    @exclusive dlong r_colMap;
    
    for (int n=0;n<p_Np;n++;@inner(0)) {
      hlong id = maskedGlobalNumbering[e*p_Np+n];
      s_gnum[n] = (id<0) ? BIG_NUM : id;
      r_colMap = colMap[e*p_Np+n];
    }

    // OCCA barrier
    // loop over rows
    for (int m=0;m<p_Np;m++;@inner(0)) {
      // really a broadcast
      dfloat Grr = ggeo[e*p_Nggeo + p_G00ID];
      dfloat Grs = ggeo[e*p_Nggeo + p_G01ID];
      dfloat Gss = ggeo[e*p_Nggeo + p_G11ID];
      dfloat J   = ggeo[e*p_Nggeo + p_GWJID];
      
      for (int n=0;n<p_Np;n++) {
	
	dfloat val = 0.;
	
	// double check this ( I assume these are symmetric )
	val += Grr*S[m+n*p_Np+0*p_Np*p_Np];
	val += Grs*S[m+n*p_Np+1*p_Np*p_Np];
	val += Gss*S[m+n*p_Np+2*p_Np*p_Np];
	val += J*lambda*MM[m+n*p_Np];
	
	// pack non-zero
	hlong row = s_gnum[n];
	hlong col = s_gnum[m];
	
	if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	  row = BIG_NUM; col = BIG_NUM; val = 0;
	}
	
	nonZero_t ent;
	ent.val = val;
	ent.row = row;
	ent.col = col;
	dlong r_rowMap = rowMap[e*p_Np+n];
	
	if(r_rowMap>=0){
	  int id = r_rowMap*p_Np + r_colMap; // sneaky transpose and write of entire "col" of block
	  AL[id] = ent;
	}
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousQuad2D(const dlong Nelements,
							 const hlong *maskedGlobalNumbering,
							const dlong  *rowMap,
							 const dlong  *colMap,
							 const dfloat *D,
							 const dfloat *ggeo,
							 const dfloat lambda,
							 nonZero_t *AL) {

  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    @exclusive dlong r_colMap;
    
    for (int ny=0;ny<p_Nq;ny++;@inner(1)) {
      for (int nx=0;nx<p_Nq;nx++;@inner(0)) {
	hlong id = maskedGlobalNumbering[e*p_Np+ny*p_Nq+nx];
	s_gnum[ny][nx] = (id<0) ? BIG_NUM : id;
	s_D[ny][nx] = D[ny*p_Nq+nx];
	r_colMap = colMap[e*p_Np+ny*p_Nq+nx];
      }
    }

    // OCCA barrier

    for (int ny=0;ny<p_Nq;ny++) {
      for (int nx=0;nx<p_Nq;nx++) {

	@barrier("local");
	
	for (int my=0;my<p_Nq;my++;@inner(1)) {
	  for (int mx=0;mx<p_Nq;mx++;@inner(0)) {
	    
	    dlong base = e*p_Np*p_Nggeo;
	    
            int id;
            dfloat val = 0.;
	    
            if (ny==my) {
              for (int k=0;k<p_Nq;k++) {
                id = k+ny*p_Nq;
                dfloat Grr = ggeo[base + id + p_G00ID*p_Np];
		
                val += Grr*s_D[k][nx]*s_D[k][mx];
              }
            }
	    
            id = mx+ny*p_Nq;
            dfloat Grs = ggeo[base + id + p_G01ID*p_Np];
            val += Grs*s_D[mx][nx]*s_D[ny][my];

            id = nx+my*p_Nq;
            dfloat Gsr = ggeo[base + id + p_G01ID*p_Np];
            val += Gsr*s_D[nx][mx]*s_D[my][ny];
	    
            if (nx==mx) {
              for (int k=0;k<p_Nq;k++) {
                id = nx+k*p_Nq;
                dfloat Gss = ggeo[base + id + p_G11ID*p_Np];
		
                val += Gss*s_D[k][ny]*s_D[k][my];
              }
            }
	    
	    
            if ((nx==mx)&&(ny==my)) {
              id = nx + ny*p_Nq;
	      
              dfloat JW = ggeo[base + id + p_GWJID*p_Np];
              val += JW*lambda;
            }
	    
	    // pack non-zero
	    hlong row = s_gnum[ny][nx];
	    hlong col = s_gnum[my][mx];
	    
	    if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	      row = BIG_NUM; col = BIG_NUM; val = 0;
	    }
	    
	    nonZero_t ent;
	    ent.val = val;
	    ent.row = row;
	    ent.col = col;
	    
	    // chunk write
	    int r = nx+ny*p_Nq;
	    int c = mx+my*p_Nq;

	    dlong r_rowMap = rowMap[e*p_Np+r];

	    if(r_rowMap>=0){
	      dlong id1 = r_rowMap*p_Np + r_colMap;
	      AL[id1] = ent;
	    }
	  }	  
        }

	@barrier("local");
	
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousTet3D(const dlong Nelements,
							const hlong *maskedGlobalNumbering,
							const dlong  *rowMap,
							const dlong  *colMap,
							const dfloat *S,
							const dfloat *MM,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL){

#define p_Nblk 1

  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;e+=p_Nblk;@outer(0)) {

    @shared hlong    s_gnum[p_Nblk][p_Np];
    @shared dfloat   s_G[p_Nblk][p_Nggeo];
    @shared dlong    s_colMap[p_Nblk][p_Np];
    @shared dlong    s_rowMap[p_Nblk][p_Np];
    
    for (int n=0;n<p_Np;n++;@inner(0)) {
      for(int f=0;f<p_Nblk;++f){
	if(e+f<Nelements){
	  hlong id = maskedGlobalNumbering[(e+f)*p_Np+n];
	  s_gnum[f][n] = (id<0) ? BIG_NUM : id;
	  s_colMap[f][n] = colMap[(e+f)*p_Np+n];
	  s_rowMap[f][n] = rowMap[(e+f)*p_Np+n];
	}
      }

      int m = n;
      dlong base = e*p_Nggeo;
      while(m<p_Nblk*p_Nggeo && (base + m)<Nelements*p_Nggeo){
	s_G[0][m] = ggeo[base+m];
	m+=p_Np;
      }
    }

    // OCCA barrier

    for (int n=0;n<p_Np;n++) {

      @barrier("local");
      
      for (int m=0;m<p_Np;m++;@inner(0)) {	
	int base = m+n*p_Np;
	dfloat Srr = S[base+0*p_Np*p_Np];
	dfloat Srs = S[base+1*p_Np*p_Np];
	dfloat Srt = S[base+2*p_Np*p_Np];
	dfloat Sss = S[base+3*p_Np*p_Np];
	dfloat Sst = S[base+4*p_Np*p_Np];
	dfloat Stt = S[base+5*p_Np*p_Np];
	dfloat lambdaMM = lambda*MM[base];

	// double check this ( I assume these are symmetric )
#pragma unroll p_Nblk
	for(int f=0;f<p_Nblk;++f){
	  
	  if(e+f<Nelements){
	    dfloat val = 0;
	    val += s_G[f][p_G00ID]*Srr;
	    val += s_G[f][p_G01ID]*Srs;
	    val += s_G[f][p_G02ID]*Srt;
	    val += s_G[f][p_G11ID]*Sss;
	    val += s_G[f][p_G12ID]*Sst;
	    val += s_G[f][p_G22ID]*Stt;
	    val += s_G[f][p_GWJID]*lambdaMM;
	    
	    // pack non-zero
	    hlong row = s_gnum[f][n];
	    hlong col = s_gnum[f][m];
	    
	    if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	      row = BIG_NUM; col = BIG_NUM; val = 0;
	    }
	    
	    nonZero_t ent;
	    ent.val = val;
	    ent.row = row;
	    ent.col = col;
	    
	    // chunk write
	    if(s_rowMap[f][n]>=0){
	      int id = s_rowMap[f][n]*p_Np + s_colMap[f][m];
	      AL[id] = ent;
	    }
	  }
	}
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousHex3D(const dlong Nelements,
							const hlong *maskedGlobalNumbering,			
							const dlong  *rowMap,
							const dlong  *colMap,
							const dfloat *D,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL) {

  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    
    for (int ny=0;ny<p_Nq;ny++;@inner(1)) {
      for (int nx=0;nx<p_Nq;nx++;@inner(0)) {
	for (int nz=0;nz<p_Nq;nz++) {
	  hlong id = maskedGlobalNumbering[e*p_Np+nz*p_Nq*p_Nq+ny*p_Nq+nx];
	  s_gnum[nz][ny][nx] = (id<0) ? BIG_NUM : id;
	}
	s_D[ny][nx] = D[ny*p_Nq+nx];
      }
    }

    // OCCA BARRIER
    for (int nz=0;nz<p_Nq;nz++) {
      for (int ny=0;ny<p_Nq;ny++){
	for (int nx=0;nx<p_Nq;nx++) {

	  @barrier("local");
	  
	  for (int my=0;my<p_Nq;my++;@inner(1)) {
	    for (int mx=0;mx<p_Nq;mx++;@inner(0)) {

	      for (int mz=0;mz<p_Nq;mz++) {
	      
		int id;
		dfloat val = 0.;
		
		dlong base = e*p_Np*p_Nggeo;
		if ((ny==my)&&(nz==mz)) {
		  for (int k=0;k<p_Nq;k++) {
		    id = k+ny*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Grr = ggeo[base + id + p_G00ID*p_Np];
		    
		    val += Grr*s_D[k][nx]*s_D[k][mx];
		  }
		}
		
		if (nz==mz) {
		  id = mx+ny*p_Nq+nz*p_Nq*p_Nq;
		  dfloat Grs = ggeo[base + id + p_G01ID*p_Np];
		  val += Grs*s_D[mx][nx]*s_D[ny][my];
		  
		  id = nx+my*p_Nq+nz*p_Nq*p_Nq;
		  dfloat Gsr = ggeo[base + id + p_G01ID*p_Np];
		  val += Gsr*s_D[nx][mx]*s_D[ny][my];
		}
		
		if (ny==my) {
		  id = mx+ny*p_Nq+nz*p_Nq*p_Nq;
		  dfloat Grt = ggeo[base + id + p_G02ID*p_Np];
		  val += Grt*s_D[mx][nx]*s_D[nz][mz];
		  
		  id = nx+ny*p_Nq+mz*p_Nq*p_Nq;
		  dfloat Gst = ggeo[base + id + p_G02ID*p_Np];
		  val += Gst*s_D[nx][mx]*s_D[mz][nz];
		}
		
		if ((nx==mx)&&(nz==mz)) {
		  for (int k=0;k<p_Nq;k++) {
		    id = nx+k*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Gss = ggeo[base + id + p_G11ID*p_Np];
		    
		    val += Gss*s_D[k][ny]*s_D[k][my];
		  }
		}
		
		if (nx==mx) {
		  id = nx+my*p_Nq+nz*p_Nq*p_Nq;
		  dfloat Gst = ggeo[base + id + p_G12ID*p_Np];
		  val += Gst*s_D[my][ny]*s_D[nz][mz];
		  
		  id = nx+ny*p_Nq+mz*p_Nq*p_Nq;
		  dfloat Gts = ggeo[base + id + p_G12ID*p_Np];
		  val += Gts*s_D[ny][my]*s_D[mz][nz];
		}
		
		if ((nx==mx)&&(ny==my)) {
		  for (int k=0;k<p_Nq;k++) {
		    id = nx+ny*p_Nq+k*p_Nq*p_Nq;
		    dfloat Gtt = ggeo[base + id + p_G22ID*p_Np];
		    
		    val += Gtt*s_D[k][nz]*s_D[k][mz];
		  }
		}
		
		if ((nx==mx)&&(ny==my)&&(nz==mz)) {
		  id = nx + ny*p_Nq+nz*p_Nq*p_Nq;
		  dfloat JW = ggeo[base + id + p_GWJID*p_Np];
		  val += JW*lambda;
		}
		
		// pack non-zero
		hlong row = s_gnum[nz][ny][nx];
		hlong col = s_gnum[mz][my][mx];
		
		if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
		  row = BIG_NUM; col = BIG_NUM; val = 0;
		}
		
		nonZero_t ent;
		ent.val = val;
		ent.row = row;
		ent.col = col;

		int idm = mx+my*p_Nq+mz*p_Nq*p_Nq;
		int idn = nx+ny*p_Nq+nz*p_Nq*p_Nq;
		
		// should replace with outEntryMap
		dlong r_rowMap = rowMap[e*p_Np+idn];
		if(r_rowMap>=0){
		  dlong id1 = r_rowMap*p_Np + colMap[e*p_Np+idm];
		  AL[id1] = ent;
		}
	      }	    
	    }
	  }
	}
      }
    }
  }
}

#ifndef MAX_DEGREE
#define MAX_DEGREE 10
#endif
@kernel void ellipticAssembleEntries(const dlong Ngather,
				     const dlong *starts,
				     const nonZero_t *AL,
				     nonZero_t *AL2,
				     dlong *counts){

  //  for(int g=0;g<Ngather;++g;@tile(32, @outer, @inner)){
#define NT 32
  for(int b=0;b<(Ngather+NT-1)/NT;++b;@outer(0)){
    @shared dlong s_offsets[NT][MAX_DEGREE];

    for(int t=0;t<NT;++t;@inner(0)){
      
      //    dlong offsets[MAX_DEGREE];
      dlong g = t + NT*b;

      if(g<Ngather){
      
	dlong start = (g==0) ? 0:starts[g-1];
	dlong end = starts[g];
	
	int deg = end-start;
	
	dlong cnt = 0;
	int merged = 0;
	int written = 0;
	
	for(int c=0;c<deg;++c){
	  s_offsets[t][c] = 0;
	}

	nonZero_t lastEnt;
	while(merged<deg*p_Np){
	  
	  // find next entry with smallest column from Nchunks lists
	  nonZero_t minEnt;
	  minEnt.col = BIG_NUM;
	  int minc = -1;
	  for(int c=0;c<deg;++c){
	    dlong off = s_offsets[t][c];
	    
	    // skip BIG_NUM entries
	    while(off<p_Np && AL[(start+c)*p_Np + off].row == BIG_NUM){
	      ++off;
	      ++merged;
	    }
	    // is this the smallest next entry ?
	    if(off<p_Np){
	      if(AL[(start+c)*p_Np + off].col < minEnt.col){
		minEnt = AL[(start+c)*p_Np + off];
		minc = c;
	      }
	    }

	    s_offsets[t][c] = off;
	  }
	  
	  if(merged==deg*p_Np || minc==-1) break; // forward wind
	  
	  ++s_offsets[t][minc];
	  
	  // is this a duplicate of last written entry ?
	  if(written && minEnt.col==lastEnt.col){
	    lastEnt.val += minEnt.val;
	    AL2[start*p_Np + cnt-1].val = lastEnt.val; // could delay this write I suppose
	    ++merged;
	  }	
	  else{
	    // or a new entry
	    AL2[start*p_Np + cnt] = minEnt;
	    lastEnt = minEnt;
	    ++merged;
	    ++cnt;
	    written = 1;
	  }
	}
	
	counts[g] = cnt;
      }
    }
  }
}

@kernel void ellipticSqueezeGaps(const dlong Ngather,
				 const dlong *origStarts, 
				 const dlong *newStarts,
				 const nonZero_t *AL,
				 nonZero_t *AL2){

  for(int g=0;g<Ngather;++g;@tile(32, @outer, @inner)){
    dlong origStart = (g==0) ? 0: origStarts[g-1]*p_Np;
    dlong start =  newStarts[g];
    dlong end = newStarts[g+1];
    dlong count = end-start;
    for(int n=0;n<count;++n){
      AL2[start+n] = AL[origStart+n];
    }
  }
}
