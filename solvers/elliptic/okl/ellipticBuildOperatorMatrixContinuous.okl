/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


#define tol 1e-12

//non-zero matrix entries
typedef struct  {
  hlong row;
  hlong col;
  dfloat val;
} nonZero_t;

// need definition of nonZero_t

@kernel void ellipticBuildOperatorMatrixContinuousTri2D(const dlong Nelements,
							const hlong  *maskedGlobalNumbering,
							const dlong  *nodeMap,
							const dfloat *S,
							const dfloat *MM,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL){
  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Np];

    for (int n=0;n<p_Np;n++;@inner(0)) {
      hlong id = maskedGlobalNumbering[e*p_Np+n];
      s_gnum[n] = (id<0) ? BIG_NUM : id;
    }

    // OCCA barrier
    // loop over rows
    for (int m=0;m<p_Np;m++;@inner(0)) {

      // really a broadcast
      dfloat Grr = ggeo[e*p_Nggeo + p_G00ID];
      dfloat Grs = ggeo[e*p_Nggeo + p_G01ID];
      dfloat Gss = ggeo[e*p_Nggeo + p_G11ID];
      dfloat J   = ggeo[e*p_Nggeo + p_GWJID];

      for (int n=0;n<p_Np;n++) {
	
	int nid = nodeMap[e*p_Np+n]; // broadcast to all threads

	if(nid>=0){
  
	  dfloat val = 0.;
	  
	  // double check this ( I assume these are symmetric )
	  val += Grr*S[m+n*p_Np+0*p_Np*p_Np];
	  val += Grs*S[m+n*p_Np+1*p_Np*p_Np];
	  val += Gss*S[m+n*p_Np+2*p_Np*p_Np];
	  val += J*lambda*MM[m+n*p_Np];
	  
	  // pack non-zero
	  hlong row = s_gnum[n];
	  hlong col = s_gnum[m];

	  if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	    row = BIG_NUM; col = BIG_NUM; val = 0;
	  }
	  
	  nonZero_t ent;
	  ent.val = val;
	  ent.row = col;
	  ent.col = row;
	  
	  // chunk write 
	  int id = nid*p_Np + m; // sneaky transpose and write of entire "col" of block
	  AL[id] = ent;
	}
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousQuad3D(const dlong Nelements,
							 const hlong *maskedGlobalNumbering,
							 const dlong  *nodeMap,
							 const dfloat *D,
							 const dfloat *ggeo,
							 const dfloat lambda,
							 nonZero_t *AL) {

  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    
    for (int ny=0;ny<p_Nq;ny++;@inner(1)) {
      for (int nx=0;nx<p_Nq;nx++;@inner(0)) {
	hlong id = maskedGlobalNumbering[e*p_Np+ny*p_Nq+nx];
	s_gnum[ny][nx] = (id<0) ? BIG_NUM : id;
	s_D[ny][nx] = D[ny*p_Nq+nx];
      }
    }

    // OCCA barrier
    
    for (int my=0;my<p_Nq;my++;@inner(1)) {
      for (int mx=0;mx<p_Nq;mx++;@inner(0)) {
	
	dlong base = e*p_Np*p_Nggeo;

        for (int ny=0;ny<p_Nq;ny++) {
          for (int nx=0;nx<p_Nq;nx++) {
	    
            int id;
            dfloat val = 0.;
	    
            if (ny==my) {
              for (int k=0;k<p_Nq;k++) {
                id = k+ny*p_Nq;
                dfloat Grr = ggeo[base + id + p_G00ID*p_Np];

                val += Grr*s_D[k][nx]*s_D[k][mx];
              }
            }

            id = mx+ny*p_Nq;
            dfloat Grs = ggeo[base + id + p_G01ID*p_Np];
            val += Grs*s_D[mx][nx]*s_D[ny][my];

            id = nx+my*p_Nq;
            dfloat Gsr = ggeo[base + id + p_G01ID*p_Np];
            val += Gsr*s_D[nx][mx]*s_D[my][ny];

            if (nx==mx) {
              for (int k=0;k<p_Nq;k++) {
                id = nx+k*p_Nq;
                dfloat Gss = ggeo[base + id + p_G11ID*p_Np];

                val += Gss*s_D[k][ny]*s_D[k][my];
              }
            }


            if ((nx==mx)&&(ny==my)) {
              id = nx + ny*p_Nq;

              dfloat JW = ggeo[base + id + p_GWJID*p_Np];
              val += JW*lambda;
            }

	    // pack non-zero
	    hlong row = s_gnum[ny][nx];
	    hlong col = s_gnum[my][mx];

	    if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	      row = BIG_NUM; col = BIG_NUM; val = 0;
	    }
	    
	    nonZero_t ent;
	    ent.val = val;
	    ent.row = row;
	    ent.col = col;
	    
	    // chunk write
	    int r = nx+ny*p_Nq;
	    int c = mx+my*p_Nq;
	    id = e*p_Np*p_Np + r*p_Np + c; 
	    AL[id] = ent;
          }
        }
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousQuad2D(const dlong Nelements,
							 const hlong *maskedGlobalNumbering,
							 const dlong  *nodeMap,
							 const dfloat *D,
							 const dfloat *ggeo,
							 const dfloat lambda,
							 nonZero_t *AL) {

  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    
    for (int ny=0;ny<p_Nq;ny++;@inner(1)) {
      for (int nx=0;nx<p_Nq;nx++;@inner(0)) {
	hlong id = maskedGlobalNumbering[e*p_Np+ny*p_Nq+nx];
	s_gnum[ny][nx] = (id<0) ? BIG_NUM : id;
	s_D[ny][nx] = D[ny*p_Nq+nx];
      }
    }

    // OCCA barrier
    
    for (int my=0;my<p_Nq;my++;@inner(1)) {
      for (int mx=0;mx<p_Nq;mx++;@inner(0)) {
	
	dlong base = e*p_Np*p_Nggeo;

        for (int ny=0;ny<p_Nq;ny++) {
          for (int nx=0;nx<p_Nq;nx++) {

            int id;
            dfloat val = 0.;
	    
            if (ny==my) {
              for (int k=0;k<p_Nq;k++) {
                id = k+ny*p_Nq;
                dfloat Grr = ggeo[base + id + p_G00ID*p_Np];

                val += Grr*s_D[k][nx]*s_D[k][mx];
              }
            }

            id = mx+ny*p_Nq;
            dfloat Grs = ggeo[base + id + p_G01ID*p_Np];
            val += Grs*s_D[mx][nx]*s_D[ny][my];

            id = nx+my*p_Nq;
            dfloat Gsr = ggeo[base + id + p_G01ID*p_Np];
            val += Gsr*s_D[nx][mx]*s_D[my][ny];

            if (nx==mx) {
              for (int k=0;k<p_Nq;k++) {
                id = nx+k*p_Nq;
                dfloat Gss = ggeo[base + id + p_G11ID*p_Np];

                val += Gss*s_D[k][ny]*s_D[k][my];
              }
            }


            if ((nx==mx)&&(ny==my)) {
              id = nx + ny*p_Nq;

              dfloat JW = ggeo[base + id + p_GWJID*p_Np];
              val += JW*lambda;
            }

	    // pack non-zero
	    hlong row = s_gnum[ny][nx];
	    hlong col = s_gnum[my][mx];

	    if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	      row = BIG_NUM; col = BIG_NUM; val = 0;
	    }
	    
	    nonZero_t ent;
	    ent.val = val;
	    ent.row = row;
	    ent.col = col;
	    
	    // chunk write
	    int r = nx+ny*p_Nq;
	    int c = mx+my*p_Nq;

	    int nid = nodeMap[e*p_Np+r];
	    
	    if(nid>=0){
	      id = nid*p_Np + c;
	      AL[id] = ent;
	    }
	  }
        }
      }
    }
  }
}



@kernel void ellipticBuildOperatorMatrixContinuousTet3D_v0(const dlong Nelements,
							   const hlong *maskedGlobalNumbering,
							   const dlong  *nodeMap,
							   const dfloat *S,
							   const dfloat *MM,
							   const dfloat *ggeo,
							   const dfloat lambda,
							   nonZero_t *AL){
  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;++e;@outer(0)) {
    
    @shared hlong s_gnum[p_Np];
    for (int n=0;n<p_Np;n++;@inner(0)) {
      hlong id = maskedGlobalNumbering[e*p_Np+n];
      s_gnum[n] = (id<0) ? BIG_NUM : id;
    }

    // OCCA barrier
    
    // loop over columns
    for (int m=0;m<p_Np;m++;@inner(0)) {

      // really a broadcast
      dfloat Grr = ggeo[e*p_Nggeo + p_G00ID];
      dfloat Grs = ggeo[e*p_Nggeo + p_G01ID];
      dfloat Grt = ggeo[e*p_Nggeo + p_G02ID];
      dfloat Gss = ggeo[e*p_Nggeo + p_G11ID];
      dfloat Gst = ggeo[e*p_Nggeo + p_G12ID];
      dfloat Gtt = ggeo[e*p_Nggeo + p_G22ID];
      
      dfloat J   = ggeo[e*p_Nggeo + p_GWJID];
      
      for (int n=0;n<p_Np;n++) {

	int nid = nodeMap[e*p_Np+n]; // broadcast to all threads

	if(nid>=0){
	
	  dfloat val = 0.;

	  const dfloat Srr_nm = S[m+n*p_Np+0*p_Np*p_Np];
	  const dfloat Srs_nm = S[m+n*p_Np+1*p_Np*p_Np];
	  const dfloat Srt_nm = S[m+n*p_Np+2*p_Np*p_Np];
	  const dfloat Sss_nm = S[m+n*p_Np+3*p_Np*p_Np];
	  const dfloat Sst_nm = S[m+n*p_Np+4*p_Np*p_Np];
	  const dfloat Stt_nm = S[m+n*p_Np+5*p_Np*p_Np];
	  const dfloat  MM_nm = MM[m+n*p_Np];
	
	  // double check this ( I assume these are symmetric )
	  val += Grr*Srr_nm;
	  val += Grs*Srs_nm;
	  val += Grt*Srt_nm;
	  val += Gss*Sss_nm;
	  val += Gst*Sst_nm;
	  val += Gtt*Stt_nm;
	  val += J*lambda*MM_nm;

	  hlong row = s_gnum[n];
	  hlong col = s_gnum[m];
	
	  if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
	    row = BIG_NUM; col = BIG_NUM; val = 0;
	  }
	
	  // pack non-zero
	  nonZero_t ent;
	  ent.val = val;
	  ent.row = row;
	  ent.col = col;
	
	  // chunk write 
	  int id = nid*p_Np + m; // sneaky transpose and write of entire "col" of block
	  AL[id] = ent;
	}
      }
    }
  }
}

@kernel void ellipticBuildOperatorMatrixContinuousTet3D(const dlong Nelements,
							const hlong *maskedGlobalNumbering,
							const dlong  *nodeMap,
							const dfloat *S,
							const dfloat *MM,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL){

#define p_Nblk 8

  //Build unassembed non-zeros
  for (dlong e=0;e<Nelements;e+=p_Nblk;@outer(0)) {

    @shared hlong s_gnum[p_Nblk][p_Np];
    @shared dfloat s_G[p_Nblk][p_Nggeo];
    @shared dlong s_nodeMap[p_Nblk][p_Np];
    
    for (int n=0;n<p_Np;n++;@inner(0)) {
      for(int f=0;f<p_Nblk;++f){
	if(e+f<Nelements){
	  hlong id = maskedGlobalNumbering[(e+f)*p_Np+n];
	  s_gnum[f][n] = (id<0) ? BIG_NUM : id;
	  s_nodeMap[f][n] = nodeMap[(e+f)*p_Np+n];
	}
      }

      int m = n;
      dlong base = e*p_Nggeo;
      while(m<p_Nblk*p_Nggeo && (base + m)<Nelements*p_Nggeo){
	s_G[0][m] = ggeo[base+m];
	m+=p_Np;
      }
    }

    // OCCA barrier

    // loop over columns
    for (int m=0;m<p_Np;m++;@inner(0)) {

      //#pragma unroll p_Np
      for (int n=0;n<p_Np;n++) {
	
	int base = m+n*p_Np;
	const dfloat Srr_nm = S[base+0*p_Np*p_Np];
	const dfloat Srs_nm = S[base+1*p_Np*p_Np];
	const dfloat Srt_nm = S[base+2*p_Np*p_Np];
	const dfloat Sss_nm = S[base+3*p_Np*p_Np];
	const dfloat Sst_nm = S[base+4*p_Np*p_Np];
	const dfloat Stt_nm = S[base+5*p_Np*p_Np];
	const dfloat lambdaMM_nm = lambda*MM[base];
	  
	// double check this ( I assume these are symmetric )
#pragma unroll p_Nblk
	for(int f=0;f<p_Nblk;++f){
	  
	  int nid = s_nodeMap[f][n]; // broadcast to all threads

	  if(e+f<Nelements){
	    if(nid>=0){
	      dfloat val = 0;
	      val += s_G[f][p_G00ID]*Srr_nm;
	      val += s_G[f][p_G01ID]*Srs_nm;
	      val += s_G[f][p_G02ID]*Srt_nm;
	      val += s_G[f][p_G11ID]*Sss_nm;
	      val += s_G[f][p_G12ID]*Sst_nm;
	      val += s_G[f][p_G22ID]*Stt_nm;
	      val += s_G[f][p_GWJID]*lambdaMM_nm;
	      
	      // pack non-zero
	      hlong row = s_gnum[f][n];
	      hlong col = s_gnum[f][m];
	      
	      if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
		row = BIG_NUM; col = BIG_NUM; val = 0;
	      }
	      
	      nonZero_t ent;
	      ent.val = val;
	      ent.row = row;
	      ent.col = col;
	      
	      // chunk write 
	      int id = nid*p_Np + m;
	      AL[id] = ent;
	    }
	  }
	}
      }
    }
  }
}


@kernel void ellipticBuildOperatorMatrixContinuousHex3D(const dlong Nelements,
							const hlong *maskedGlobalNumbering,							
							const dlong  *nodeMap,
							const dfloat *D,
							const dfloat *ggeo,
							const dfloat lambda,
							nonZero_t *AL) {

  for (dlong e=0;e<Nelements;++e;@outer(0)) {

    @shared hlong s_gnum[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_D[p_Nq][p_Nq];
    
    for (int ny=0;ny<p_Nq;ny++;@inner(1)) {
      for (int nx=0;nx<p_Nq;nx++;@inner(0)) {
	for (int nz=0;nz<p_Nq;nz++) {
	  hlong id = maskedGlobalNumbering[e*p_Np+nz*p_Nq*p_Nq+ny*p_Nq+nx];
	  s_gnum[nz][ny][nx] = (id<0) ? BIG_NUM : id;

	}
	s_D[ny][nx] = D[ny*p_Nq+nx];
      }
    }

    // OCCA BARRIER
    
    for (int my=0;my<p_Nq;my++;@inner(1)) {
      for (int mx=0;mx<p_Nq;mx++;@inner(0)) {
	
	for (int mz=0;mz<p_Nq;mz++) {
	  
	  int idm = mx+my*p_Nq+mz*p_Nq*p_Nq;

	  for (int nz=0;nz<p_Nq;nz++) {
	    for (int ny=0;ny<p_Nq;ny++){
	      for (int nx=0;nx<p_Nq;nx++) {
		int idn = nx+ny*p_Nq+nz*p_Nq*p_Nq;

		int nid = nodeMap[e*p_Np+idn]; // broadcast to all threads
		
		if(nid>=0){

		
		  int id;
		  dfloat val = 0.;
		
		  dlong base = e*p_Np*p_Nggeo;
		  if ((ny==my)&&(nz==mz)) {
		    for (int k=0;k<p_Nq;k++) {
		      id = k+ny*p_Nq+nz*p_Nq*p_Nq;
		      dfloat Grr = ggeo[base + id + p_G00ID*p_Np];
		    
		      val += Grr*s_D[k][nx]*s_D[k][mx];
		    }
		  }
		
		  if (nz==mz) {
		    id = mx+ny*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Grs = ggeo[base + id + p_G01ID*p_Np];
		    val += Grs*s_D[mx][nx]*s_D[ny][my];
		  
		    id = nx+my*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Gsr = ggeo[base + id + p_G01ID*p_Np];
		    val += Gsr*s_D[nx][mx]*s_D[ny][my];
		  }
		
		  if (ny==my) {
		    id = mx+ny*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Grt = ggeo[base + id + p_G02ID*p_Np];
		    val += Grt*s_D[mx][nx]*s_D[nz][mz];
		  
		    id = nx+ny*p_Nq+mz*p_Nq*p_Nq;
		    dfloat Gst = ggeo[base + id + p_G02ID*p_Np];
		    val += Gst*s_D[nx][mx]*s_D[mz][nz];
		  }
	      
		  if ((nx==mx)&&(nz==mz)) {
		    for (int k=0;k<p_Nq;k++) {
		      id = nx+k*p_Nq+nz*p_Nq*p_Nq;
		      dfloat Gss = ggeo[base + id + p_G11ID*p_Np];
		  
		      val += Gss*s_D[k][ny]*s_D[k][my];
		    }
		  }
	      
		  if (nx==mx) {
		    id = nx+my*p_Nq+nz*p_Nq*p_Nq;
		    dfloat Gst = ggeo[base + id + p_G12ID*p_Np];
		    val += Gst*s_D[my][ny]*s_D[nz][mz];
		
		    id = nx+ny*p_Nq+mz*p_Nq*p_Nq;
		    dfloat Gts = ggeo[base + id + p_G12ID*p_Np];
		    val += Gts*s_D[ny][my]*s_D[mz][nz];
		  }

		  if ((nx==mx)&&(ny==my)) {
		    for (int k=0;k<p_Nq;k++) {
		      id = nx+ny*p_Nq+k*p_Nq*p_Nq;
		      dfloat Gtt = ggeo[base + id + p_G22ID*p_Np];

		      val += Gtt*s_D[k][nz]*s_D[k][mz];
		    }
		  }

		  if ((nx==mx)&&(ny==my)&&(nz==mz)) {
		    id = nx + ny*p_Nq+nz*p_Nq*p_Nq;
		    dfloat JW = ggeo[base + id + p_GWJID*p_Np];
		    val += JW*lambda;
		  }

		  // pack non-zero
		  hlong row = s_gnum[nz][ny][nx];
		  hlong col = s_gnum[mz][my][mx];

		  if(row==BIG_NUM || col==BIG_NUM || fabs(val)<tol){
		    row = BIG_NUM; col = BIG_NUM; val = 0;
		  }

		  nonZero_t ent;
		  ent.val = val;
		  ent.row = row;
		  ent.col = col;
		
		  // chunk write 
		  //id = e*p_Np*p_Np + idn*p_Np + idm;
		  id = nid*p_Np + idm;
		  AL[id] = ent;
		}
	      }
	    }
	  }
	}
      }
    }
  }
}
