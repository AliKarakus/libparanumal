/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void lssAdvectionCubatureVolumeTet3D(const dlong Nelements,
                                    const dfloat t,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubD,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockV; @outer(0)){  

    @shared dfloat s_u[p_cubNblockV][p_Np];
    @shared dfloat s_v[p_cubNblockV][p_Np];
    @shared dfloat s_w[p_cubNblockV][p_Np];
    @shared dfloat s_q[p_cubNblockV][p_Np];

    @shared dfloat s_Fr[p_cubNblockV][p_cubNp];
    @shared dfloat s_Fs[p_cubNblockV][p_cubNp];
    @shared dfloat s_Ft[p_cubNblockV][p_cubNp];

    @exclusive dlong  e; 
    
    for(int es=0;es<p_cubNblockV;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){  
        e = eo+es; 
        if(e<Nelements && n<p_Np){
            const dlong id = e*p_Np*p_dim+n;
            s_u[es][n]   = U[id + 0*p_Np];
            s_v[es][n]   = U[id + 1*p_Np];
            s_w[es][n]   = U[id + 2*p_Np];
            s_q[es][n]   = q[e*p_Np + n];
        } 
      }
    }


    for(int es=0;es<p_cubNblockV;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){
        if(e<Nelements && n<p_cubNp){
          // prefetch geometric factors (constant on triangle)
          const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
          const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
          const dfloat drdz = vgeo[e*p_Nvgeo + p_RZID];

          const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
          const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];
          const dfloat dsdz = vgeo[e*p_Nvgeo + p_SZID];

          const dfloat dtdx = vgeo[e*p_Nvgeo + p_TXID];
          const dfloat dtdy = vgeo[e*p_Nvgeo + p_TYID];
          const dfloat dtdz = vgeo[e*p_Nvgeo + p_TZID];

          dfloat cu = 0.f, cv = 0.f, cw = 0.f, cq = 0.f;
          #pragma unroll p_Np
          for(int m=0;m<p_Np;++m){
            dfloat cI = cubInterp[n+m*p_cubNp];
            cu    += cI*s_u[es][m];
            cv    += cI*s_v[es][m];
            cw    += cI*s_w[es][m];
            cq    += cI*s_q[es][m]; 
          }
          s_Fr[es][n] = cq*(drdx*cu + drdy*cv + drdz*cw);
          s_Fs[es][n] = cq*(dsdx*cu + dsdy*cv + dsdz*cw);
          s_Ft[es][n] = cq*(dtdx*cu + dtdy*cv + dtdz*cw);
         }
      }
      }


    for(int es=0;es<p_cubNblockV;++es;@inner(1)){
      for(int n=0;n<p_cubNp;++n;@inner(0)){ 
        if(e<Nelements && n<p_Np){        
          dfloat rhsqn = 0.f; 
          #pragma unroll p_cubNp
            for(int m=0;m<p_cubNp;++m){
              rhsqn += cubPDT[n+m*p_Np+0*p_cubNp*p_Np]*s_Fr[es][m];
              rhsqn += cubPDT[n+m*p_Np+1*p_cubNp*p_Np]*s_Fs[es][m];
              rhsqn += cubPDT[n+m*p_Np+2*p_cubNp*p_Np]*s_Ft[es][m];
            }
          // Update
          rhsq[e*p_Np + n] =  rhsqn; 
        }
      }
    }

  }
}







@kernel void lssAdvectionCubatureSurfaceTet3D(const dlong Nelements,
                                    const dfloat time,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  sgeo,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    @restrict const  dfloat *  intInterp, 
                                    @restrict const  dfloat *  intLIFT, 
                                    @restrict const  dfloat *  intx,
                                    @restrict const  dfloat *  inty,
                                    @restrict const  dfloat *  intz,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){
// for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_cubNblockS;@outer(0)){

    // shared storage for flux terms
    @shared dfloat s_uM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_vM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_wM[p_cubNblockS][p_NfacesNfp];
    
    @shared dfloat s_uP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_vP[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_wP[p_cubNblockS][p_NfacesNfp];
    //
    @shared dfloat s_qM[p_cubNblockS][p_NfacesNfp];
    @shared dfloat s_qP[p_cubNblockS][p_NfacesNfp];
    //
    @shared dfloat s_fluxq[p_cubNblockS][p_intNfpNfaces];

    @exclusive dlong e; 

    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        e = eo + es;
        if(e<Nelements && n<(p_Nfaces*p_Nfp)){
          const dlong id  = e*p_Nfp*p_Nfaces + n;
          const dlong idM = vmapM[id];
          const dlong idP = vmapP[id];

          // load traces
          const dlong eM = e;
          const dlong eP = idP/p_Np;
          const int vidM = idM%p_Np;
          const int vidP = idP%p_Np;

          const dlong qbaseM = eM*p_Np*p_dim + vidM;
          const dlong qbaseP = eP*p_Np*p_dim + vidP;


          // load negative and positive trace node values of velocity
          s_uM[es][n] = U[qbaseM+0*p_Np];
          s_vM[es][n] = U[qbaseM+1*p_Np];
          s_wM[es][n] = U[qbaseM+2*p_Np];

          s_uP[es][n] = U[qbaseP+0*p_Np];
          s_vP[es][n] = U[qbaseP+1*p_Np];
          s_wP[es][n] = U[qbaseP+2*p_Np];
        
          s_qM[es][n] = q[idM];
          s_qP[es][n] = q[idP];
      }
      }
    }


    // interpolate to surface integration nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){ 
        if(e<Nelements && n<(p_intNfp*p_Nfaces)){
            const int face = n/p_intNfp; 
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat nz   = sgeo[sid+p_NZID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            dfloat um  = 0., vm  = 0.;
            dfloat up  = 0., vp  = 0.;
            dfloat wm  = 0., wp  = 0.;
            dfloat qm  = 0., qp  = 0.;

            // local block interpolation (face nodes to integration nodes)
            #pragma unroll p_Nfp
            for(int m=0;m<p_Nfp;++m){
              const dfloat Inm = intInterp[n+m*p_Nfaces*p_intNfp];
              const int fm = face*p_Nfp+m;
              um += Inm*s_uM[es][fm];
              vm += Inm*s_vM[es][fm];
              wm += Inm*s_wM[es][fm];
        
              up += Inm*s_uP[es][fm];
              vp += Inm*s_vP[es][fm];
              wp += Inm*s_wP[es][fm];
              
              qm += Inm*s_qM[es][fm];
              qp += Inm*s_qP[es][fm];
            }

            // apply boundary condition
            int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              const dlong vid = n+e*p_Nfaces*p_intNfp; 
              lssDirichletConditions3D(bc, time, intx[vid], inty[vid],intz[vid],nx, ny, nz, qm, &qp);
            }

            // Find max normal velocity on the face
            dfloat unM   = fabs(nx*um + ny*vm + nz*wm);
            dfloat unP   = fabs(nx*up + ny*vp + nz*wp);    
            dfloat unMax = (unM > unP) ? unM : unP;

            // evaluate "flux" terms: LLF
            const dfloat sc = 0.5f*invJ*sJ ; 
            s_fluxq[es][n] = sc*(nx*(up*qp + um*qm) + ny*(vp*qp + vm*qm) +
                                 nz*(wp*qp + wm*qm) + unMax*(qm-qp));
          }
      }
    }

    // wait for all @shared memory writes of the previous @inner( )loop to complete
   

    // lift from surface integration to volume nodes
    for(int es=0;es<p_cubNblockS;++es;@inner(1)){
      for(int n=0;n<p_cubMaxNodes;++n;@inner(0)){
        if(e<Nelements && n<p_Np ){
            int id = n + p_Np*e;
            dfloat rhs = 0.f; 
            #pragma unroll p_intNfpNfaces
            for(int m=0;m<(p_intNfp*p_Nfaces);++m){
              rhs += intLIFT[n+m*p_Np]*s_fluxq[es][m];
            }
            rhsq[id] -= rhs;
           }
      }
    }
  }
}

