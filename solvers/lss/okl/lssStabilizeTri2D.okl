/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define WLSQR 0
#define LSENO 0
#define WENO2 1 

// Base line decay for the sensor
#define BLDEC 1 


@kernel void lssSkylineTri2D(const dlong Nelements,
			     @restrict const dfloat* ggeo,
			     @restrict const int *  ModMap,
			     @restrict const dfloat * MM,               
			     @restrict const dfloat * InvVT,
			     @restrict const dfloat * LSF,
			     @restrict const dfloat * BLD,
			     @restrict const dfloat * Q, // 
			     @restrict dlong *  ElementList){
  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_Q[p_Np], s_Mod[p_Np]; //  s_LSF[p_N]; 
#if BLDEC==1
    @shared dfloat s_L2[p_Np]; 
    // @exclusive dfloat norm;  
#endif
    // @shared int s_ModMap[p_Np]; 
    @shared dfloat s_LogMod[p_Nq], s_SkyMod[p_Nq]; 

    // prefetch global variables
    for(int n=0; n<p_Np; n++; @inner(0)){
      const dlong id = n+e*p_Np; 
      s_Q[n]      = Q[id];     // solution field 
      // hold on shared if needed
      // s_ModMap[n] = ModMap[n]; // Mod Map
      // if(n<p_N){
      //   s_LSF[n] = LSF[n]; 
      // } 
    }

    @barrier("local");

    // get modal coefficients and compute L2 norm
    for(int n=0; n<p_Np; n++; @inner(0)){
      dfloat mod = 0; 
#if BLDEC==1
      dfloat l2  = 0;
#endif 
      for(int m=0; m<p_Np;m++){
        mod +=InvVT[n+m*p_Np]*s_Q[m];
#if BLDEC==1
        l2  += MM[n+m*p_Np]*s_Q[m];
#endif
      }
      s_Mod[n] = mod; 
#if BLDEC==1
      const dfloat J = ggeo[e*p_Nggeo + p_GWJID];
      s_L2[n] = J*l2; 
#endif
    }
   
    @barrier("local");

    //skyline pessimization: get 1D mods from 2D
    for(int n=0; n<p_Np; n++; @inner(0)){

#if BLDEC==1
      // norm = q' * MM * q on element e
      dfloat norm = 0.f; 
      for(int m=0; m<p_Np;m++){
        norm +=s_Q[m]*s_L2[m];
      } 

#endif

      if(n<p_Nq){ // AK: this could be better!!! too many idle threads
        dfloat modsum = 0; 
        // we have i+1, i'th order mod
	for(int i=0; i<n+1; i++){
          const int nmods = 0.5*n*(n+1) + i; 
          const int m     = ModMap[nmods]; 
          modsum += s_Mod[m]*s_Mod[m];  
	}
#if BLDEC==1
        s_LogMod[n] = log10(sqrt(modsum + BLD[n]*norm));     
#else
        s_LogMod[n] = log10(sqrt(modsum )); 
#endif
        // Initialize Skyline Modes
        s_SkyMod[n] = (n==0) ? s_LogMod[n]:0.0; // don't touch to constant mod
      }
    }

    @barrier("local");

    // Skyline cut for modal potrait
    for(int n=0; n<p_Np; n++; @inner(0)){
      if(n>0 && n<p_Nq){ // AK: this could be better!!! too many idle threads
	dfloat maxq = s_LogMod[n]; 
	for(int j=n; j<p_Nq; j++){
	  maxq = (n==p_N) ? max(maxq, s_LogMod[j-1]) : max(maxq, s_LogMod[j]); 
	}
	s_SkyMod[n] = maxq; 
      }
    }

    @barrier("local");

    // totally serial p_N floating point operations
    for(int n=0; n<p_Np; n++; @inner(0)){
      if(n==0){
	dfloat coeff = 0.f; 
	for(int i=0; i<p_N; i++){
	  coeff += LSF[i]*s_SkyMod[i+1];
	}
	ElementList[e] = fabs(coeff)<3.0? s_FVFV_TYPE: s_DGDG_TYPE; 
      }
    }
  }
}



@kernel void lssFindNeighTri2D(const dlong Nelements,
			       @restrict const dlong * EToE, 
			       @restrict dlong *  ElementList){
  for(dlong n=0;n<Nelements;++n;@tile(p_blockSize,@outer,@inner))
    {
      const int elmType = ElementList[n];
      if(elmType==s_DGDG_TYPE){
	int neighType = s_DGDG_TYPE; 
	// if any of the face is connected to FV cell, mark it
	for(int f=0; f<p_Nfaces; f++){
	  const dlong eP = EToE[n*p_Nfaces + f];
	  // should be fine since we never modify FVFV cell 
	  if(ElementList[eP]==s_FVFV_TYPE) 
	    neighType = s_DGFV_TYPE;  
	}
	ElementList[n] = neighType; 
      }
    }

}




// Project to FV 
@kernel void lssProjectTri2D(const dlong Nelements,
                             const int all, 
                             @restrict const dlong *elmList, 
                             @restrict const dfloat *  PMT,                            
                             @restrict const dfloat *  Q,
                             @restrict dfloat *pQ){

  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
    @shared dfloat s_q[s_Nblocks][p_Np];
    @exclusive int elmType; 
    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int n=0;n<s_maxNodes;++n;@inner(0)){
	const dlong e = eo+es; 
	if(e<Nelements){
	  elmType = all ? s_FVFV_TYPE: elmList[e]; 
	  if(n<p_Np && elmType==s_FVFV_TYPE){
	    s_q[es][n] = Q[e*p_Np + n]; 
	  }
	}
      }
    }

    @barrier("local"); 

    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int n=0;n<s_maxNodes;++n;@inner(0)){
	const dlong e = eo+es;
        if(n<s_Ncells && e<Nelements && elmType==s_FVFV_TYPE){
          dfloat sqn = 0; 
          for(int i=0; i<p_Np; i++){
            sqn += PMT[n + i*s_Ncells]*s_q[es][i]; 
          }
	  pQ[e*s_Ncells + n] = sqn; 
        }
      }
    }

  }
}

//  AK : Need to test this version of projection more !!!!!
@kernel void lssProjectDGTri2D(const dlong Nelements,
			       const int all, 
			       @restrict const dlong * elmList, 
			       @restrict const dlong * vmapM, 
			       @restrict const int *mFToE, 
			       @restrict const int *mFToF, 
			       @restrict const dfloat *  PFMT,                            
			       @restrict const dfloat *  Q,
			       @restrict dfloat *sface){
  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
    @shared dfloat s_q[s_NblocksS][p_NfacesNfp];
    @exclusive int elmType; 
    for(int es=0;es<s_NblocksS;++es;@inner(1)){
      for(int n=0;n<s_maxNodesS;++n;@inner(0)){
	const dlong e = eo+es; 
	if(e<Nelements){
	  elmType = all ? s_DGFV_TYPE: elmList[e]; 
	  if(n<p_NfacesNfp && elmType==s_DGFV_TYPE){
	    const dlong id0 = vmapM[e*p_NfacesNfp + n];
	    s_q[es][n] = Q[id0]; 
	  }
	}
      }
    }

    @barrier("local"); 

    for(int es=0;es<s_NblocksS;++es;@inner(1)){
      for(int n=0;n<s_maxNodesS;++n;@inner(0)){
	const dlong e = eo+es;
	if(e<Nelements){
	  if(n<s_NfacesNfp && elmType==s_DGFV_TYPE){
	    dfloat sqn = 0.f; 
	    const int idn  = n%s_N; 
	    const int face = n/s_N; 
	    for(int i=0; i<p_Nfp; i++){
	      const dfloat pfm = PFMT[idn + i*s_N]; // this operator defined on single face only: can expand it all faces
	      sqn += pfm*s_q[es][face*p_Nfp + i]; 
	    }
	    const int e0 = mFToE[n];  // get local subcell element number in this cell 
	    const int f0 = mFToF[n];

	    sface[(e*s_Ncells + e0)*p_Nfaces + f0] = sqn; 
	  }
	}
      }
    }

  }
}


// Recontruct DG solution from FV data
@kernel void lssReconstructTri2D(const dlong Nelements,
				 const int all,
				 @restrict const dlong *elmList,  
				 @restrict const dfloat *  RMT,                            
				 @restrict const dfloat *  pQ,
				 @restrict dfloat *Q){

  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
    @shared dfloat s_pq[s_Nblocks][s_Ncells];
    @exclusive int elmType; 
    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int n=0;n<s_maxNodes;++n;@inner(0)){
	const dlong e = eo+es; 
	if(e<Nelements){
	  elmType = all ? s_FVFV_TYPE: elmList[e]; 
	  if(n<s_Ncells && elmType==s_FVFV_TYPE){
	    s_pq[es][n] = pQ[e*s_Ncells + n]; 
	  }
	}
      }
    }

    @barrier("local"); 

    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int n=0;n<s_maxNodes;++n;@inner(0)){
	const dlong e = eo+es; 
	if(n<p_Np && e<Nelements && elmType==s_FVFV_TYPE){
	  dfloat rq = 0; 
	  for(int i=0; i<s_Ncells; i++){
	    rq += RMT[n + i*p_Np]*s_pq[es][i]; 
	  }
	  Q[e*p_Np + n] = rq; 
	}
      }
    }
  }
}


// Compute volume terms for DGDG + DGFV elements 
@kernel void lssPartialRedistanceVolumeTri2D(const dlong Nelements,
					     @restrict const dlong *elmList, 
					     const dlong offset, 
					     @restrict const  dfloat *  vgeo,
					     @restrict const  dfloat *  DT,
					     const  dfloat    t,
					     @restrict const  dfloat *  x,
					     @restrict const  dfloat *  y,
					     @restrict const  dfloat *  z,
					     @restrict const  dfloat *  q,
					     @restrict        dfloat *  gradq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_q[p_Np];
    @exclusive int elmType; 

    for(int n=0;n<p_Np;++n;@inner(0)){
      elmType = elmList[e]; 
      if(elmType!=s_FVFV_TYPE){
        const dlong id = e*p_Np + n;
        s_q[n]          = q[id];
      }
    }

    @barrier("local");

    for(int n=0;n<p_Np;++n;@inner(0)){
      
      if(elmType!=s_FVFV_TYPE){
	// prefetch geometric factors (constant on triangle)
	const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
	const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
	const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
	const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

	dfloat dqdr = 0, dqds = 0; 

	for(int i=0;i<p_Np;++i){
	  const dfloat qn = s_q[i];
	  dqdr += DT[n+i*p_Np+0*p_Np*p_Np]*qn;
	  dqds += DT[n+i*p_Np+1*p_Np*p_Np]*qn;
	}

	const dfloat dqdx = drdx*dqdr + dsdx*dqds;
	const dfloat dqdy = drdy*dqdr + dsdy*dqds;

	const dlong id = e*p_Np + n;
	gradq[id + 0*offset] = -dqdx;
	gradq[id + 1*offset] = -dqdy;
      }

    }
  }
}




// Compute WENO2 reconstruction with Least Squares
void WENO2Coeff(const dfloat dx1,  const dfloat dy1, 
                const dfloat dx2,  const dfloat dy2, 
                const dfloat dx3,  const dfloat dy3, 
                dfloat qm,   dfloat qp1, dfloat qp2,  dfloat qp3,
                const int bc1, const int bc2, const int bc3, 
                dfloat *a1, dfloat *a2, dfloat *a3){

  const dfloat eps = 1E-12; 
  // Create Stencil size of 3 i.e. [m p1 p2; m p2 p3; m p3 p1]
  dfloat det1 = 1.0 / (dx1*dy2 - dx2*dy1); 
  dfloat a12 = det1*( (dy1-dy2)*qm + ( dy2)*qp1 +(-dy1)*qp2); 
  dfloat a13 = det1*(-(dx1-dx2)*qm + (-dx2)*qp1 +( dx1)*qp2); 

  dfloat det2 = 1.0 / (dx2*dy3 - dx3*dy2); 
  dfloat a22 = det2*( (dy2-dy3)*qm + ( dy3)*qp2 +(-dy2)*qp3); 
  dfloat a23 = det2*(-(dx2-dx3)*qm + (-dx3)*qp2 +( dx2)*qp3); 

  dfloat det3 = 1.0 / (dx3*dy1 - dx1*dy3); 
  dfloat a32 = det3*( (dy3-dy1)*qm + ( dy1)*qp3 +(-dy3)*qp1); 
  dfloat a33 = det3*(-(dx3-dx1)*qm + (-dx1)*qp3 +( dx3)*qp1); 

  // AK: need to be muliplied with h^-2, formerly !!!!!
  dfloat l11 = sqrt(a12*a12 + a13*a13); // very ugly
  dfloat l12 = sqrt(a22*a22 + a23*a23); // very ugly
  dfloat l13 = sqrt(a32*a32 + a33*a33); // very ugly


  dfloat w1 = 1.0/ pow((eps + l11),3); // very ugly !!!
  dfloat w2 = 1.0/ pow((eps + l12),3); // very ugly !!!
  dfloat w3 = 1.0/ pow((eps + l13),3); // very ugly !!!

  // Nonlinear weights
  *a1 = qm; 
  *a2 = (w1*a12 + w2*a22 + w3*a32)/(w1+w2+w3); 
  *a3 = (w1*a13 + w2*a23 + w3*a33)/(w1+w2+w3); 

}


// Reconstruct FV face values using LS only for internal subcells 
// i.e. the elements have connection only in this macro element
// Can be done before halo exchange 
@kernel void lssReconstructInternalFaceTri2D(const dlong Nelements,
					     @restrict const dlong *elmList, 
					     @restrict const int *localList, 
					     @restrict const dfloat *  vgeo,                            
					     @restrict const dfloat *  sgeo,                            
					     @restrict const dlong *  emapP,                            
					     @restrict const dlong *  fmapP,                            
					     @restrict const dfloat *  q,
					     @restrict const dfloat *  sq,
					     @restrict dfloat *sface){

  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int s=0;s<s_Nint;++s;@inner(0)){ 
        const dlong e = eo + es;
        if(e<Nelements){
          const int elmType = elmList[e]; 
          if(elmType==s_FVFV_TYPE){
            const int slocal =  localList[s]; 
            const dlong sem  =  e*s_Ncells + slocal; 
            const dlong vid  =  sem*s_Nvgeo;  
            const dlong sid  =  sem*p_Nfaces*s_Nsgeo; 
            //
            const dfloat qm   = sq[sem]; // solution
            const dfloat xcm  = vgeo[vid + s_CXID]; // center coordinates
            const dfloat ycm  = vgeo[vid + s_CYID];

            // const dlong id    = (e*s_Ncells + slocal)*p_Nfaces; 
            // Use global connection
            const dlong sep1  = emapP[sem*p_Nfaces + 0];
            const dlong sep2  = emapP[sem*p_Nfaces + 1];
            const dlong sep3  = emapP[sem*p_Nfaces + 2];

            const int bc1      = sgeo[sid + 0*s_Nsgeo + s_BCID]; 
            const int bc2      = sgeo[sid + 1*s_Nsgeo + s_BCID]; 
            const int bc3      = sgeo[sid + 2*s_Nsgeo + s_BCID];

            dfloat xcp1  = vgeo[sep1*s_Nvgeo + s_CXID];  
            dfloat ycp1  = vgeo[sep1*s_Nvgeo + s_CYID]; 

            dfloat xcp2  = vgeo[sep2*s_Nvgeo + s_CXID];  
            dfloat ycp2  = vgeo[sep2*s_Nvgeo + s_CYID]; 

            dfloat xcp3  = vgeo[sep3*s_Nvgeo + s_CXID];  
            dfloat ycp3  = vgeo[sep3*s_Nvgeo + s_CYID]; 

            dfloat qp1   = sq[sep1]; 
            dfloat qp2   = sq[sep2]; 
            dfloat qp3   = sq[sep3]; 
          
            const dfloat dx1 = (xcp1 - xcm); 
            const dfloat dy1 = (ycp1 - ycm); 
            
            const dfloat dx2 = (xcp2 - xcm); 
            const dfloat dy2 = (ycp2 - ycm); 
            
            const dfloat dx3 = (xcp3 - xcm); 
            const dfloat dy3 = (ycp3 - ycm); 

            dfloat a1, a2, a3; 
            WENO2Coeff(dx1,dy1, dx2,dy2, dx3,dy3, qm,qp1,qp2,qp3, 
		       bc1, bc2, bc3, &a1, &a2, &a3);

	    for(int f=0; f<p_Nfaces; f++){
              // modifed 2nd order WENO 
              const dfloat fxm = sgeo[sid + f*s_Nsgeo + s_FXID]; 
              const dfloat fym = sgeo[sid + f*s_Nsgeo + s_FYID];
                  
              sface[sem*p_Nfaces + f] = a1 + a2*(fxm -xcm) + a3*(fym - ycm); 
                
            }
          }
        }
      }
    }

  }
}

// Reconstruct FV face values using LS only for external subcells 
// i.e. the elements having connections with other macro element's subcells
// has to be done after halo exchange 
@kernel void lssReconstructExternalFaceTri2D(const dlong Nelements,
					     @restrict const dlong * elmList, 
					     @restrict const int *localList, 
					     @restrict const dfloat * vgeo,                            
					     @restrict const dfloat * sgeo,                            
					     @restrict const dlong *  emapP,                            
					     @restrict const dlong *  fmapP,                            
					     @restrict const dfloat *  q,
					     @restrict const dfloat *  sq,
					     @restrict dfloat *sface){

  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int s=0;s<s_Next;++s;@inner(0)){ 
        const dlong e = eo + es;
        if(e<Nelements){
          const int elmType = elmList[e]; 
          if(elmType==s_FVFV_TYPE){
            const int slocal =  localList[s]; 
            const dlong sem  =  e*s_Ncells + slocal; 
            const dlong vid  =  sem*s_Nvgeo;  
            const dlong sid  =  sem*p_Nfaces*s_Nsgeo; 
            
            //Local Infos
            const dfloat qm   = sq[sem];             // solution
            const dfloat xcm  = vgeo[vid + s_CXID]; // center coordinates
            const dfloat ycm  = vgeo[vid + s_CYID];
            
            // const dlong id    = (e*s_Ncells + sem)*p_Nfaces; 
            // Use global connection
            const dlong sep1  = emapP[sem*p_Nfaces + 0];
            const dlong sep2  = emapP[sem*p_Nfaces + 1];
            const dlong sep3  = emapP[sem*p_Nfaces + 2];

            const int bc1      = sgeo[sid + 0*s_Nsgeo + s_BCID]; 
            const int bc2      = sgeo[sid + 1*s_Nsgeo + s_BCID]; 
            const int bc3      = sgeo[sid + 2*s_Nsgeo + s_BCID];
            
            const dlong ep1 = sep1/s_Ncells; 
            const dlong ep2 = sep2/s_Ncells; 
            const dlong ep3 = sep3/s_Ncells; 

            const int etype1 = elmList[ep1]; 
            const int etype2 = elmList[ep2]; 
            const int etype3 = elmList[ep3]; 
            
            dfloat qp1  = 0,  qp2 =0,   qp3 = 0; 
            dfloat xcp1 = 0, xcp2 =0,   xcp3= 0; 
            dfloat ycp1 = 0, ycp2 =0,   ycp3= 0; 

            if(etype1==s_FVFV_TYPE){
              qp1   = sq[sep1]; 
              xcp1  = vgeo[sep1*s_Nvgeo + s_CXID];  
              ycp1  = vgeo[sep1*s_Nvgeo + s_CYID]; 
            }else{ // DGFV Tpe : face value already constructed
              const int fp = fmapP[sem*p_Nfaces + 0];
              qp1  = sface[sep1*p_Nfaces + fp];
              xcp1 =  sgeo[sid + 0*s_Nsgeo + s_FXID];
              ycp1 =  sgeo[sid + 0*s_Nsgeo + s_FYID];
            }

            if(etype2==s_FVFV_TYPE){
              qp2   = sq[sep2]; 
              xcp2  = vgeo[sep2*s_Nvgeo + s_CXID];  
              ycp2  = vgeo[sep2*s_Nvgeo + s_CYID]; 
            }else{// DGFV Tpe : face value already constructed
              const int fp = fmapP[sem*p_Nfaces + 1];  
              qp2  = sface[sep2*p_Nfaces + fp];
              xcp2 =  sgeo[sid + 1*s_Nsgeo + s_FXID];
              ycp2 =  sgeo[sid + 1*s_Nsgeo + s_FYID];
            }

            if(etype3==s_FVFV_TYPE){
              qp3   = sq[sep3]; 
              xcp3  = vgeo[sep3*s_Nvgeo + s_CXID];  
              ycp3  = vgeo[sep3*s_Nvgeo + s_CYID]; 
            }else{// DGFV Tpe : face value already constructed
              const int fp = fmapP[sem*p_Nfaces + 2];  
              qp3  = sface[sep3*p_Nfaces + fp];
              xcp3 =  sgeo[sid + 2*s_Nsgeo + s_FXID];
              ycp3 =  sgeo[sid + 2*s_Nsgeo + s_FYID];
            }

	    // Do nothing BC's: a little tricky for FV cells
            if(bc1>0){
              xcp1 =  sgeo[sid + 0*s_Nsgeo + s_FXID];
              ycp1 =  sgeo[sid + 0*s_Nsgeo + s_FYID];
              qp1 = qm; 
            }
            if(bc2>0){
              xcp2 =  sgeo[sid + 1*s_Nsgeo + s_FXID];
              ycp2 =  sgeo[sid + 1*s_Nsgeo + s_FYID];
              qp2  = qm; 
            }
            if(bc3>0){
              xcp3 =  sgeo[sid + 2*s_Nsgeo + s_FXID];
              ycp3 =  sgeo[sid + 2*s_Nsgeo + s_FYID];
              qp3 = qm;
            }

	    const dfloat dx1 = (xcp1 - xcm); 
	    const dfloat dy1 = (ycp1 - ycm); 
          
	    const dfloat dx2 = (xcp2 - xcm); 
	    const dfloat dy2 = (ycp2 - ycm); 
          
	    const dfloat dx3 = (xcp3 - xcm); 
	    const dfloat dy3 = (ycp3 - ycm); 

	    dfloat a1, a2, a3; 
	    WENO2Coeff(dx1,dy1, dx2,dy2, dx3,dy3, qm,qp1,qp2,qp3, 
		       bc1, bc2, bc3, &a1, &a2, &a3);
          
	    // Do nothing BC's: a little tricky for FV cells
	    if(bc1>0 || bc2>0 || bc3>0){
	      // iterate to reconstruct face values at BC's
	      for(int i=0; i<5; i++){
		if(bc1>0){qp1 = a1 + a2*dx1 + a3*dy1;}
		if(bc2>0){qp2 = a1 + a2*dx2 + a3*dy2;}
		if(bc3>0){qp3 = a1 + a2*dx3 + a3*dy3;}
		WENO2Coeff(dx1,dy1, dx2,dy2, dx3,dy3, qm,qp1,qp2,qp3, 
                           bc1, bc2, bc3, &a1, &a2, &a3);
	      }
	    }

	    for(int f=0; f<p_Nfaces; f++){
	      // modifed 2nd order WENO 
	      const dfloat fxm = sgeo[sid + f*s_Nsgeo + s_FXID]; 
	      const dfloat fym = sgeo[sid + f*s_Nsgeo + s_FYID];     
	      sface[sem*p_Nfaces + f] = a1 + a2*(fxm -xcm) + a3*(fym - ycm); 
              
	    }
	  }
	}
      }
    }

  }

}


// Compute HJ equation, assumes FV face values are already constructed
@kernel void lssSubcellComputeTri2D(const dlong Nelements,
				    @restrict const dlong *elmList, 
				    @restrict const dlong *emapP, 
				    @restrict const dlong *fmapP,                                   
				    @restrict const dfloat *  RMT,  
				    @restrict const dfloat *  vgeo,                            
				    @restrict const dfloat *  sgeo,                                         
				    @restrict const dfloat *  q,
				    @restrict const dfloat *  sgnq,
				    @restrict const dfloat *  sface,
				    @restrict dfloat *rhsq){

  for(dlong eo=0;eo<Nelements;eo+=s_Nblocks;@outer(0)){
  
    for(int es=0;es<s_Nblocks;++es;@inner(1)){
      for(int s=0;s<s_Ncells;++s;@inner(0)){ 
        const dlong e = eo + es;
	if(e<Nelements){
          const dlong elmType = elmList[e]; 

          dfloat rhss = 0.f; 

          if(elmType==s_FVFV_TYPE){
            const dlong sem  =  e*s_Ncells + s; 

            const dlong vid   = sem*s_Nvgeo;  
            const dlong sid   = sem*p_Nfaces*s_Nsgeo; 
            const dfloat ivm  = vgeo[vid + s_IVID]; 

            dfloat p1 = 0.f, p2 = 0.f; 
            dfloat q1 = 0.f, q2 = 0.f;

            for(int fm=0; fm<p_Nfaces; fm++){
              const dlong  sep  = emapP[e*s_Ncells*p_Nfaces + s*p_Nfaces + fm];
              const int    fp   = fmapP[e*s_Ncells*p_Nfaces + s*p_Nfaces + fm];

              const dfloat qfm  = sface[sem*p_Nfaces + fm]; 
              const dfloat qfp  = sface[sep*p_Nfaces + fp]; 

              const dfloat nxm  = sgeo[sid + fm*s_Nsgeo + s_NXID];
              const dfloat nym  = sgeo[sid + fm*s_Nsgeo + s_NYID]; 
              const dfloat sam  = sgeo[sid + fm*s_Nsgeo + s_SAID];

              dfloat unx = 0.f, dnx = 1.f; 
              dfloat uny = 0.f, dny = 1.f; 

              if(nxm>=0){unx = 1.f; dnx = 0.f; };
              if(nym>=0){uny = 1.f; dny = 0.f; };

              p1 += ivm*sam*nxm*( dnx*qfm + unx*qfp);
              p2 += ivm*sam*nxm*( unx*qfm + dnx*qfp);

              q1 += ivm*sam*nym*( dny*qfm + uny*qfp);
              q2 += ivm*sam*nym*( uny*qfm + dny*qfp);
            }

	    const dfloat rsgn = sgnq[sem]; // regularized sign 

	    const dfloat p  = 0.5*(p1+p2);
	    const dfloat q  = 0.5*(q1+q2);
	    rhss = -( rsgn*( sqrt(p*p+q*q)-1.0) - 0.5*(p1-p2) - 0.5*(q1-q2) );
	  }
	  rhsq[e*s_Ncells + s] = rhss;  
	}
      }
    }
  }

}



// batch process elements
@kernel void lssPartialRedistanceSurfaceTri2D(const dlong Nelements,
					      const dlong offset,
					      @restrict const dlong *elmList, 
					      @restrict const  dfloat *  sgeo,
					      @restrict const  dfloat *  LIFTT,
					      @restrict const  dlong  *  vmapM,
					      @restrict const  dlong  *  vmapP,
					      @restrict const  int    *  EToB,
					      const  dfloat time,
					      @restrict const  dfloat *  x,
					      @restrict const  dfloat *  y,
					      @restrict const  dfloat *  z,
					      @restrict const  dfloat *  sq,                                  
					      @restrict const  dfloat *  q,
					      @restrict const  dfloat *  gradq,
					      @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_pf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_pf2[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qf2[p_NblockS][p_NfacesNfp];
    
    @exclusive int elmType; 
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          elmType = elmList[e];
          if(n<p_NfacesNfp && elmType==s_DGDG_TYPE){
            // find face that owns this node
            const int face = n/p_Nfp;
            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];

            // load traces
            const dfloat qM = q[idM];  dfloat qP = q[idP];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            if(bc>0){
              lssDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, qM, &qP);
            }
            
            const dfloat sc = invJ*sJ; 
            // simple upwind
            dfloat unx = 0.0, dnx = 1.0; 
            dfloat uny = 0.0, dny = 1.0; 
            if(nx>= 0){unx = 1.0, dnx = 0.0;}
            if(ny>= 0){uny = 1.0, dny = 0.0;}
            s_pf1[es][n]= sc*nx*( (dnx*qM  + unx*qP));
            s_pf2[es][n]= sc*nx*( (unx*qM  + dnx*qP));
            s_qf1[es][n]= sc*ny*( (dny*qM  + uny*qP));
            s_qf2[es][n]= sc*ny*( (uny*qM  + dny*qP));
          }
        }
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np && elmType==s_DGDG_TYPE){
            const dlong id = e*p_Np+n;
            dfloat p1 = 0.f, p2 = 0.f; 
            dfloat q1 = 0.f, q2 = 0.f; 
            
            // 
#pragma unroll p_NfacesNfp
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFTT[n+m*p_Np];
	      p1 += L*s_pf1[es][m];
	      p2 += L*s_pf2[es][m];
	      q1 += L*s_qf1[es][m];
	      q2 += L*s_qf2[es][m];
	    }
            const dfloat sqn  = sq[id];
            const dfloat dqdx = gradq[id + 0*offset];
            const dfloat dqdy = gradq[id + 1*offset];

            p1 +=  dqdx; p2 +=  dqdx; 
            q1 +=  dqdy; q2 +=  dqdy;

            const dfloat P = 0.5f*(p1+p2); 
            const dfloat Q = 0.5f*(q1+q2); 
           
            // LLF Numerical Hamiltonian
            rhsq[id] =  -( sqn*( sqrt( P*P+Q*Q )-1.0) -0.5f*(p1-p2)-0.5*(q1-q2));
          }
        }
      }
    }
  }
}

// AK: This kernel could be separated as DGDG and DGFV elements 
// need to use the same shared memory for DGtoDG connection and DGtoFV connection
// Surface contribution for DGDG and DGFV
@kernel void lssMixedRedistanceSurfaceTri2D(const dlong Nelements,
					    const dlong offset,
					    @restrict const dlong *elmList, 
					    @restrict const dlong *EToE, 
					    @restrict const  int    *  EToB,
					    @restrict const  dfloat *  sgeo,
					    @restrict const  dfloat *  ssgeo,
					    @restrict const  dfloat *  svgeo,
					    @restrict const  dfloat *  LIFTT,
					    @restrict const  dfloat *  SLIFTT,
					    @restrict const  dfloat *  RFMT, // face reconstruction FVtoDG
					    @restrict const  dlong  *  vmapM,
					    @restrict const  dlong  *  vmapP,
					    @restrict const dlong *emapP, 
					    @restrict const dlong *fmapP,     
					    @restrict const  int    *  mFToE,
					    @restrict const  int    *  mFToF,
					    @restrict const  int    *  mDGID,
                                            const  dfloat time,
					    @restrict const  dfloat *  x,
					    @restrict const  dfloat *  y,
					    @restrict const  dfloat *  z,
					    @restrict const  dfloat *  sq,                                  
					    @restrict const  dfloat *  q,
					    @restrict const  dfloat *  sface,
					    @restrict const  dfloat *  gradq,
					    @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_pf1[p_NblockS][s_NfacesNfp];
    @shared dfloat s_pf2[p_NblockS][s_NfacesNfp];
    @shared dfloat s_qf1[p_NblockS][s_NfacesNfp];
    @shared dfloat s_qf2[p_NblockS][s_NfacesNfp];

    @shared int s_type[p_NblockS][s_NfacesNfp];
    // @shared int s_dgid[p_NblockS][s_NfacesNfp]; // this should be part of subcell
    // @shared int s_type2[p_NblockS][s_NfacesNfp];
    // @exclusive int elmType, ftype; 
    @exclusive int elmType, ftype; 
    // @exclusive int faceDG, faceFV; 

    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      // for(int n=0;n<s_maxNodesS;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
      for(int n=0;n<s_NfacesNfp;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          elmType = elmList[e];
          if(elmType==s_DGFV_TYPE){ 
	    // if(n<s_NfacesNfp){ // assumes s_Nfp >=p_Nfp which is valid for proper reconstruction 
            const int face        = n/s_N;  
            const int lid         = n%s_N;  
            const dlong neigh     = EToE[e*p_Nfaces + face];
            
            ftype       = elmList[neigh]; 
            //
            s_pf1[es][n]= 0.f;  s_pf2[es][n]= 0.f; 
            s_qf1[es][n]= 0.f;  s_qf2[es][n]= 0.f; 
            s_type[es][n]= 0;   

            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];
            const dfloat sc   = invJ*sJ; 
            
            if(ftype!= s_FVFV_TYPE && lid<p_Nfp){ // DGDG connection
              const dfloat nx   = sgeo[sid+p_NXID];
              const dfloat ny   = sgeo[sid+p_NYID];
              
              
              // indices of negative and positive traces of face node
              const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nfp + lid;
              const dlong idM = vmapM[id];
              const dlong idP = vmapP[id];
              // // load traces
              const dfloat qM = q[idM];   dfloat qP = q[idP];
              // apply boundary condition
              const int bc = EToB[face+p_Nfaces*e];
              if(bc>0){
                lssDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, qM, &qP);
              }
              
              // simple upwind
              dfloat unx = 0.0, dnx = 1.0; 
              dfloat uny = 0.0, dny = 1.0; 
              if(nx>= 0){unx = 1.0, dnx = 0.0;}
              if(ny>= 0){uny = 1.0, dny = 0.0;}

              // convert to dg ids
              const int dgid = face*s_N + lid; 
              s_pf1[es][dgid]   = sc*nx*( (dnx*qM  + unx*qP));
              s_pf2[es][dgid]   = sc*nx*( (unx*qM  + dnx*qP));
              s_qf1[es][dgid]   = sc*ny*( (dny*qM  + uny*qP));
              s_qf2[es][dgid]   = sc*ny*( (uny*qM  + dny*qP));
              s_type[es][dgid]  = 1;
              // s_dgid[es][dgid]  = face*p_Nfp + lid; 

	    }else if(ftype== s_FVFV_TYPE && lid<s_N){
              
              const int fvid    = face*s_N + lid;  
              const int e0      = mFToE[fvid]; 
              const int sfm     = mFToF[fvid]; 

              const dlong sem   = e*s_Ncells + e0; 
              const dlong sep   = emapP[sem*p_Nfaces + sfm];
              const int   sfp   = fmapP[sem*p_Nfaces + sfm];

              const dfloat qfm = sface[sem*p_Nfaces + sfm]; 
              const dfloat qfp = sface[sep*p_Nfaces + sfp];

              const dlong ssid  = sem*p_Nfaces*s_Nsgeo; 
              const dfloat nxm  = ssgeo[ssid + sfm*s_Nsgeo + s_NXID];
              const dfloat nym  = ssgeo[ssid + sfm*s_Nsgeo + s_NYID]; 
              const dfloat sam  = ssgeo[ssid + sfm*s_Nsgeo + s_SAID];

              dfloat unx = 0.f, dnx = 1.f; 
              dfloat uny = 0.f, dny = 1.f; 

              if(nxm>=0){unx = 1.f; dnx = 0.f; };
              if(nym>=0){uny = 1.f; dny = 0.f; };
              s_pf1[es][fvid]= sc*nxm*( dnx*qfm + unx*qfp); 
              s_pf2[es][fvid]= sc*nxm*( unx*qfm + dnx*qfp);
              s_qf1[es][fvid]= sc*nym*( dny*qfm + uny*qfp);
              s_qf2[es][fvid]= sc*nym*( uny*qfm + dny*qfp);
              s_type[es][fvid]  = 2;
	    }
	  }
	}
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np && elmType==s_DGFV_TYPE){
	    const dlong id = e*p_Np+n;
            dfloat p1 = 0.f, p2 = 0.f; 
            dfloat q1 = 0.f, q2 = 0.f;      
            // 
#pragma unroll s_NfacesNfp
	    for(int m=0;m<s_NfacesNfp;++m){
	      dfloat L = 0.f; 
	      const int id = s_type[es][m]; 
	      if(id==1) { 
		int mid = mDGID[m];
		L = LIFTT[n+mid*p_Np];
	      }

	      if(id==2) { 
		L = SLIFTT[n+m*p_Np];
	      } 

	      p1 += L*s_pf1[es][m];
	      p2 += L*s_pf2[es][m];
	      q1 += L*s_qf1[es][m];
	      q2 += L*s_qf2[es][m];
	    }

            const dfloat sqn  = sq[id];
            const dfloat dqdx = gradq[id + 0*offset];
            const dfloat dqdy = gradq[id + 1*offset];

            p1 +=  dqdx; p2 +=  dqdx; 
            q1 +=  dqdy; q2 +=  dqdy;

            const dfloat P = 0.5f*(p1+p2); 
            const dfloat Q = 0.5f*(q1+q2); 
           
            // LLF Numerical Hamiltonian
            rhsq[id] =  -( sqn*( sqrt( P*P+Q*Q )-1.f) -0.5f*(p1-p2)-0.5*(q1-q2));
          }
        }
      }
    }
  }
}



