/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


@kernel void lssAdvectionVolumeQuad2D(const dlong Nelements,
                                   const  dfloat    t,
                                   @restrict const  dfloat *  vgeo,
                                   @restrict const  dfloat *  DT,
                                   @restrict const  dfloat *  x,
                                   @restrict const  dfloat *  y,
                                   @restrict const  dfloat *  z,
                                   @restrict const  dfloat *  U,
                                   @restrict const  dfloat *  q,
                                   @restrict        dfloat *  rhsq){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_Fr[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_Fs[p_NblockV][p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];
            const dfloat JW   = vgeo[gid + p_JWID*p_Np];

            const dlong id = e*p_Np*p_dim + j*p_Nq+i;

            const dfloat un = U[id+0*p_Np];
            const dfloat vn = U[id+1*p_Np];
            const dfloat qn = q[e*p_Np + j*p_Nq+i];

            s_Fr[es][j][i] = JW*qn*(drdx*un+drdy*vn);
            s_Fs[es][j][i] = JW*qn*(dsdx*un+dsdy*vn);

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];
            dfloat rhsqn = 0.; 

            #pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_DT[n][i];
              const dfloat Ds = s_DT[n][j];

              rhsqn += Dr*s_Fr[es][j][n]
                      +Ds*s_Fs[es][n][i];
            }

            const dlong id = e*p_Np + j*p_Nq + i;
              rhsq[id] = invJW*rhsqn;
          }
        }
      }
    }
  }
}







void surfaceTerms(const int e,
                  const int es,
                  const int sk,
                  const int face,
                  const int i,
                  const int j,
                  const dfloat *sgeo,
                  const dfloat t,
                  const dfloat *x,
                  const dfloat *y,
                  const int *vmapM,
                  const int *vmapP,
                  const int *EToB,
                  const dfloat *q,
                  const dfloat *U,
                        dfloat s_fluxq[p_NblockS][p_Nq][p_Nq]){

  // load surface geofactors for this face
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];

  // indices of negative and positive traces of face node
  const dlong idM = vmapM[sk];
  const dlong idP = vmapP[sk];

  // load traces
  const dfloat qM = q[idM];  dfloat qP = q[idP];

  // load traces
  const dlong eM = e;
  const dlong eP = idP/p_Np;
  const int vidM = idM%p_Np;
  const int vidP = idP%p_Np;

  const dlong qbaseM = eM*p_Np*p_dim + vidM;
  const dlong qbaseP = eP*p_Np*p_dim + vidP;

  // load negative and positive trace node values of U, V, Pr
  const dfloat  uM = U[qbaseM+0*p_Np], vM = U[qbaseM+1*p_Np];
        dfloat  uP = U[qbaseP+0*p_Np], vP = U[qbaseP+1*p_Np];


  // apply boundary condition
  const int bc = EToB[face+p_Nfaces*e];
  if(bc>0){
    lssDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, qM, &qP);
  }

  // Assumes velocity field is not C0 i.e. solution of INS-DG 
  dfloat unM   = fabs(nx*uM + ny*vM);
  dfloat unP   = fabs(nx*uP + ny*vP);    
  dfloat unMax = (unM > unP) ? unM : unP;

  // s_fluxq[es][j][i] += 0.5*invWJ*sJ*( nx*(uM*qM - uP*qP) + ny*(vM*qM - vP*qP) - unMax*(qM-qP) );
  s_fluxq[es][j][i] += 0.5*invWJ*sJ*( nx*(uM*qM + uP*qP) + ny*(vM*qM + vP*qP) + unMax*(uM-uP) );
}

// batch process elements
@kernel void lssAdvectionSurfaceQuad2D(const dlong Nelements,
                                       @restrict const  dfloat *  sgeo,
                                       @restrict const  dfloat *  LIFT,
                                       @restrict const  dlong  *  vmapM,
                                       @restrict const  dlong  *  vmapP,
                                       @restrict const  int    *  EToB,
                                                 const  dfloat time,
                                       @restrict const  dfloat *  x,
                                       @restrict const  dfloat *  y,
                                       @restrict const  dfloat *  z,
                                       @restrict const  dfloat *  U,                                  
                                       @restrict const  dfloat *  q,
                                       @restrict dfloat *  rhsq){

    // for all elements
    for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_fluxq[p_NblockS][p_Nq][p_Nq];

    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
          for(int j=0;j<p_Nq;++j){
            s_fluxq[es][j][i] = 0.;
          }
      }
    }

    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          const dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i; 
          
          surfaceTerms(e, es, sk0, 0, i, 0,      sgeo, time, x, y, vmapM, vmapP, EToB, q, U, s_fluxq);
          surfaceTerms(e, es, sk2, 2, i, p_Nq-1, sgeo, time, x, y, vmapM, vmapP, EToB, q, U, s_fluxq);
        }
      }
    }

    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          const dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          const dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j; 
        
          surfaceTerms(e, es, sk1, 1, p_Nq-1, j, sgeo, time, x, y, vmapM, vmapP, EToB, q, U, s_fluxq);
          surfaceTerms(e, es, sk3, 3, 0, j,      sgeo, time, x, y, vmapM, vmapP, EToB, q, U, s_fluxq);
        }
      }
    }

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          #pragma unroll p_Nq
            for(int j=0;j<p_Nq;++j){
              const dlong id = e*p_Np+j*p_Nq+i;         
              rhsq[id] -= s_fluxq[es][j][i];
            }
        }
      }
    }
  }
}
