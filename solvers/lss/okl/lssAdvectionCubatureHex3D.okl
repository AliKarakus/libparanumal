/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

//unified @kernel, but might use too much memory
@kernel void lssAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                    const dfloat t,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubvgeo,
                                    @restrict const  dfloat *  cubDT,
                                    @restrict const  dfloat *  cubPDT,
                                    @restrict const  dfloat *  cubInterp,
                                    @restrict const  dfloat *  cubProject,
                                    @restrict const  dfloat *  x,
                                    @restrict const  dfloat *  y,
                                    @restrict const  dfloat *  z,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){
  //----------------------------@kernel 1 interpolate velocity fields to quadrature points
  for(dlong e=0; e<Nelements; ++e; @outer(0)) {

    @shared dfloat s_cubDT[p_cubNq][p_cubNq];
    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];
    @shared dfloat s_Q[p_cubNq][p_cubNq];

    #define s_Fr s_U 
    #define s_Fs s_V 
    #define s_Ft s_W 

    #define s_rhsq s_Fr

    @exclusive dfloat r_cu[p_cubNq], r_cv[p_cubNq]; 
    @exclusive dfloat r_cw[p_cubNq], r_cq[p_cubNq];
    @exclusive dfloat r_rhsq[p_cubNq];

     for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq) {
          s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
        }
        if (i<p_Nq) {
          s_cubProject[j][i] = cubProject[i+j*p_Nq];
        }
        s_cubDT[j][i] = cubDT[i+j*p_cubNq];

        #pragma unroll p_cubNq
          for(int k=0;k<p_cubNq;++k){
            r_cu[k] = 0.;
            r_cv[k] = 0.;
            r_cw[k] = 0.;
            r_cq[k] = 0.;
            //
            r_rhsq[k] = 0.;
          }
      }
    }


    //read in and interpolate in k
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (i<p_Nq && j<p_Nq) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong id = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;
            const dfloat uc = U[id+0*p_Np];
            const dfloat vc = U[id+1*p_Np];
            const dfloat wc = U[id+2*p_Np];

            const dfloat qc = q[e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i];

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Ik = s_cubInterp[k][n];
              r_cu[n] += Ik*uc;
              r_cv[n] += Ik*vc;
              r_cw[n] += Ik*wc;
              r_cq[n] += Ik*qc;
            }
          }
        }
      }
    }


    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if (i<p_Nq && j<p_Nq) {
            s_U[j][i] = r_cu[k];
            s_V[j][i] = r_cv[k];
            s_W[j][i] = r_cw[k];
            s_Q[j][i] = r_cq[k];
          }
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_cu[k] = 0.; r_cv[k]  = 0.; 
            r_cw[k] = 0.; r_cq[k]  = 0.;

            #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Ii = s_cubInterp[n][i];
              r_cu[k] += Ii*s_U[j][n];
              r_cv[k] += Ii*s_V[j][n];
              r_cw[k] += Ii*s_W[j][n];
              r_cq[k] += Ii*s_Q[j][n];
            }
          }
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_U[j][i] = r_cu[k];
            s_V[j][i] = r_cv[k];
            s_W[j][i] = r_cw[k];
            s_Q[j][i] = r_cq[k];
          }
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          r_cu[k] = 0.; r_cv[k] = 0.; 
          r_cw[k] = 0.; r_cq[k] = 0.;

          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            const dfloat Ij = s_cubInterp[n][j];
            r_cu[k] += Ij*s_U[n][i];
            r_cv[k] += Ij*s_V[n][i];
            r_cw[k] += Ij*s_W[n][i];
            r_cq[k] += Ij*s_Q[n][i];
          }
        }
      }

    }

    //#pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){

      //fetch slice
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gid = e*p_cubNp*p_Nvgeo+ k*p_cubNq*p_cubNq + j*p_cubNq +i;
          const dfloat drdx = cubvgeo[gid + p_RXID*p_cubNp];
          const dfloat drdy = cubvgeo[gid + p_RYID*p_cubNp];
          const dfloat drdz = cubvgeo[gid + p_RZID*p_cubNp];
          const dfloat dsdx = cubvgeo[gid + p_SXID*p_cubNp];
          const dfloat dsdy = cubvgeo[gid + p_SYID*p_cubNp];
          const dfloat dsdz = cubvgeo[gid + p_SZID*p_cubNp];
          const dfloat dtdx = cubvgeo[gid + p_TXID*p_cubNp];
          const dfloat dtdy = cubvgeo[gid + p_TYID*p_cubNp];
          const dfloat dtdz = cubvgeo[gid + p_TZID*p_cubNp];
          const dfloat JW   = cubvgeo[gid + p_JWID*p_cubNp];

          const dfloat un = r_cu[k];
          const dfloat vn = r_cv[k];
          const dfloat wn = r_cw[k];
          const dfloat qn = r_cq[k];

          s_Fr[j][i] = JW*qn*(drdx*un+drdy*vn+drdz*wn);
          s_Fs[j][i] = JW*qn*(dsdx*un+dsdy*vn+dsdz*wn);
          s_Ft[j][i] = JW*qn*(dtdx*un+dtdy*vn+dtdz*wn);
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Dr = s_cubDT[n][i];
              const dfloat Ds = s_cubDT[n][j];
              const dfloat Dt = s_cubDT[k][n];
              r_rhsq[k] += Dr*s_Fr[j][n];
              r_rhsq[k] += Ds*s_Fs[n][i];
              r_rhsq[n] += Dt*s_Ft[j][i];
            }
        }
      }

    } //k loop

    #pragma unroll p_cubNq
    for(int k=0;k<p_cubNq;++k){
      //load slice to @shared
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          s_rhsq[j][i] = r_rhsq[k];
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            r_rhsq[k] = 0.; 
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pj = s_cubProject[n][j];
              r_rhsq[k] += Pj*s_rhsq[n][i];
            }
          }
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if(j<p_Nq){
            s_rhsq[j][i] = r_rhsq[k];
          }
        }
      }


      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
          if ((i<p_Nq) && (j<p_Nq)) {
            r_rhsq[k] = 0.; 
            #pragma unroll p_cubNq
            for (int n=0;n<p_cubNq;n++) {
              const dfloat Pi = s_cubProject[n][i];
              r_rhsq[k] += Pi*s_rhsq[j][n];
            }
          }
        }
      }

    }

    //project in k and write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if ((i<p_Nq) && (j<p_Nq)) {
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            dfloat rhsqn=0.; 

            #pragma unroll p_cubNq
            for(int n=0;n<p_cubNq;++n){
              const dfloat Pk = s_cubProject[n][k];
              rhsqn += Pk*r_rhsq[n];
            }
            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            rhsq[id] = invJW*rhsqn;
          }
        }
      }
    }
  }
}







#define quadSurfaceTerms(face)                                          \
  {                                                                     \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if(i<p_Nq && j<p_Nq){                                           \
          const dlong id  = e*p_Nfp*p_Nfaces + face*p_Nfp + j*p_Nq +i;  \
          const dlong idM = vmapM[id];                                  \
          const dlong idP = vmapP[id];                                  \
                                                                        \
          const dlong eM = e;                                           \
          const dlong eP = idP/p_Np;                                    \
          const int vidM = idM%p_Np;                                    \
          const int vidP = idP%p_Np;                                    \
                                                                        \
          const dlong qbaseM = eM*p_Np*p_dim + vidM;                    \
          const dlong qbaseP = eP*p_Np*p_dim + vidP;                    \
                                                                        \
          s_uM[j][i] = U[qbaseM+0*p_Np];                                \
          s_vM[j][i] = U[qbaseM+1*p_Np];                                \
          s_wM[j][i] = U[qbaseM+2*p_Np];                                \
          s_qM[j][i] = q[idM];                                          \
                                                                        \
          s_uP[j][i] = U[qbaseP+0*p_Np];                                \
          s_vP[j][i] = U[qbaseP+1*p_Np];                                \
          s_wP[j][i] = U[qbaseP+2*p_Np];                                \
          s_qP[j][i] = q[idP];                                          \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_uMn = 0.; r_vMn = 0.; r_wMn = 0.; r_qMn = 0.;               \
          r_uPn = 0.; r_vPn = 0.; r_wPn = 0.; r_qPn = 0.;               \
          for (int n=0;n<p_Nq;n++) {                                    \
            const dfloat Ini = s_cubInterp[n][i];                       \
            r_uMn  += Ini*s_uM[j][n];                                   \
            r_vMn  += Ini*s_vM[j][n];                                   \
            r_wMn  += Ini*s_wM[j][n];                                   \
            r_qMn  += Ini*s_qM[j][n];                                   \
                                                                        \
            r_uPn  += Ini*s_uP[j][n];                                   \
            r_vPn  += Ini*s_vP[j][n];                                   \
            r_wPn  += Ini*s_wP[j][n];                                   \
            r_qPn  += Ini*s_qP[j][n];                                   \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_uM[j][i] = r_uMn;                                           \
          s_vM[j][i] = r_vMn;                                           \
          s_wM[j][i] = r_wMn;                                           \
          s_qM[j][i] = r_qMn;                                           \
                                                                        \
          s_uP[j][i] = r_uPn;                                           \
          s_vP[j][i] = r_vPn;                                           \
          s_wP[j][i] = r_wPn;                                           \
          s_qP[j][i] = r_qPn;                                           \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        r_uMn = 0.; r_vMn = 0.; r_wMn = 0.;r_qMn = 0.;                  \
        r_uPn = 0.; r_vPn = 0.; r_wPn = 0.;r_qPn = 0.;                  \
        for (int n=0;n<p_Nq;n++) {                                      \
          const dfloat Inj = s_cubInterp[n][j];                         \
          r_uMn += Inj*s_uM[n][i];                                      \
          r_vMn += Inj*s_vM[n][i];                                      \
          r_wMn += Inj*s_wM[n][i];                                      \
          r_qMn += Inj*s_qM[n][i];                                      \
                                                                        \
          r_uPn += Inj*s_uP[n][i];                                      \
          r_vPn += Inj*s_vP[n][i];                                      \
          r_wPn += Inj*s_wP[n][i];                                      \
          r_qPn += Inj*s_qP[n][i];                                      \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
for(int j=0;j<p_cubNq;++j;@inner(1)){                                   \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        const dlong sk = e*p_cubNfp*p_Nfaces + face*p_cubNfp + j*p_cubNq + i; \
        const dfloat nx = cubsgeo[sk*p_Nsgeo+p_NXID];                   \
        const dfloat ny = cubsgeo[sk*p_Nsgeo+p_NYID];                   \
        const dfloat nz = cubsgeo[sk*p_Nsgeo+p_NZID];                   \
        const dfloat WsJ = cubsgeo[sk*p_Nsgeo+p_WSJID];                 \
        const dfloat uM = r_uMn, vM = r_vMn, wM = r_wMn, qM = r_qMn;    \
        const dfloat uP = r_uPn, vP = r_vPn, wP = r_wPn;                \
              dfloat qP = r_qPn;                                        \
                                                                        \
        const int bc = EToB[face+p_Nfaces*e];                           \
        if(bc>0) {                                                      \
                                                                       \
          lssDirichletConditions3D(bc, time, intx[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i],\
                                   inty[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i], \
                                   intz[e*p_Nfaces*p_cubNfp + face*p_cubNfp + j*p_cubNq + i],\
                                   nx, ny, nz, qM, &qP);               \
        }                                                               \
                                                                        \
        const dfloat unM   = fabs(nx*uM + ny*vM + nz*wM);               \
        const dfloat unP   = fabs(nx*uP + ny*vP + nz*wP);               \
        const dfloat unMax = (unM > unP) ? unM : unP;                   \
                                                                        \
        s_fluxq[j][i] = WsJ*(.5f*( nx*(uP*qP + uM*qM)                   \
                                 + ny*(vP*qP + vM*qM)                   \
                                 + nz*(wP*qP + wM*qM)  + unMax*(qM-qP) )); \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          r_rhsqn = 0.;                                                  \
          for (int n=0;n<p_cubNq;n++) {                                 \
            const dfloat Pnj = s_cubProject[n][j];                      \
            r_rhsqn  += Pnj*s_fluxq[n][i];                               \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq) {                                                   \
          s_fluxq[j][i] = r_rhsqn;                                        \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          r_rhsqn = 0.;                                                  \
          for(int n=0;n<p_cubNq;++n){                                   \
            const dfloat Pni = s_cubProject[n][i];                      \
            r_rhsqn += Pni*s_fluxq[j][n];                                \
          }                                                             \
        }                                                               \
      }                                                                 \
    }                                                                   \
                                                                        \
                                                                        \
    for(int j=0;j<p_cubNq;++j;@inner(1)){                               \
      for(int i=0;i<p_cubNq;++i;@inner(0)){                             \
        if (j<p_Nq && i<p_Nq) {                                         \
          s_fluxq[j][i] = r_rhsqn;                                       \
        }                                                               \
      }                                                                 \
    }                                                                   \                                                                        \
  }


@kernel void lssAdvectionCubatureSurfaceHex3D(const dlong Nelements,
                                    const dfloat time,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  cubsgeo,
                                    @restrict const  dlong  *  vmapM,
                                    @restrict const  dlong  *  vmapP,
                                    @restrict const  int    *  EToB,
                                    @restrict const  dfloat *  cubInterp, 
                                    @restrict const  dfloat *  cubProject, 
                                    @restrict const  dfloat *  intx,
                                    @restrict const  dfloat *  inty,
                                    @restrict const  dfloat *  intz,
                                    @restrict const  dfloat *  U,
                                    @restrict const  dfloat *  q,
                                    @restrict dfloat *  rhsq){

  // for all elements
  for(dlong e=0;e<Nelements;e++;@outer(0)){
    // @shared storage for flux terms
    @exclusive dfloat r_rhsq[p_Nq];

    @shared dfloat s_uM[p_cubNq][p_cubNq];
    @shared dfloat s_vM[p_cubNq][p_cubNq];
    @shared dfloat s_wM[p_cubNq][p_cubNq];
    @shared dfloat s_qM[p_cubNq][p_cubNq];

    @shared dfloat s_uP[p_cubNq][p_cubNq];
    @shared dfloat s_vP[p_cubNq][p_cubNq];
    @shared dfloat s_wP[p_cubNq][p_cubNq];
    @shared dfloat s_qP[p_cubNq][p_cubNq];


    // reuse @shared memory buffers
    #define s_fluxq s_uM

    @exclusive dfloat r_uMn, r_vMn, r_wMn, r_qMn;
    @exclusive dfloat r_uPn, r_vPn, r_wPn, r_qPn;

    #define r_rhsqn r_uMn

    @shared dfloat s_cubInterp[p_Nq][p_cubNq];
    @shared dfloat s_cubProject[p_cubNq][p_Nq];

    // for all face nodes of all elements
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        //zero out resulting surface contributions
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          r_rhsq[k] = 0.;
        }

        //fetch reference operators
        if (j<p_Nq) {
          s_cubInterp[j][i] = cubInterp[i+j*p_cubNq];
        }
        if (i<p_Nq) {
          s_cubProject[j][i] = cubProject[i+j*p_Nq];
        }
      }
    }


    quadSurfaceTerms(0) //face 0


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_rhsq[0] += s_fluxq[j][i];
        }
      }
    }


    quadSurfaceTerms(5) //face 5


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i<p_Nq) {
          r_rhsq[p_Nq-1] += s_fluxq[j][i];
        }
      }
    }


    quadSurfaceTerms(1) //face 1


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==0 && i<p_Nq) {//face 1
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhsq[n] += s_fluxq[n][i];
          }
        }
      }
    }


    quadSurfaceTerms(3) //face 3


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j==p_Nq-1 && i<p_Nq) {//face 3
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhsq[n] += s_fluxq[n][i];
          }
        }
      }
    }


    quadSurfaceTerms(2) //face 2


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==p_Nq-1) {//face 2
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhsq[n] += s_fluxq[n][j];
          }
        }
      }
    }


    quadSurfaceTerms(4) //face 4


    //accumulate in register pencil
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if (j<p_Nq && i==0) {//face 4
          #pragma unroll p_Nq
          for (int n=0;n<p_Nq;n++) {
            r_rhsq[n] += s_fluxq[n][j];
          }
        }
      }
    }


    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
        if(i<p_Nq && j<p_Nq){
          #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
            const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

            const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
            rhsq[id] -= invJW*r_rhsq[k];
          }
        }
      }
    }
  }
}
#undef quadSurfaceTerms