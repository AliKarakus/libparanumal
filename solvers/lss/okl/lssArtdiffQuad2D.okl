/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


// Compute Gradient in Strong Form
@kernel void lssGradientVolumeQuad2D(const dlong Nelements,
                                    @restrict const  dfloat *  vgeo,
                                    @restrict const  dfloat *  DT,
                                    @restrict const  dfloat *  Q,
                                          @restrict  dfloat *  RHS){

for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  

  @shared dfloat s_Q[p_NblockV][p_Nq][p_Nq];
  @shared dfloat s_DT[p_Nq][p_Nq];

  for(int fld=0; fld<p_Nfields; fld++){

     for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block

          if(e<Nelements){
            const dlong id = e*p_Np*p_Nfields + j*p_Nq+i;

            s_Q[es][j][i]  = Q[id + fld*p_Np];

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }

        }
      }
    }

      // Make sure all node data is loaded into @shared
     for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

            // compute 'r' and 's' derivatives of (q_m) at node n
            dfloat dpdr  = 0.f, dpds  = 0.f;

            #pragma unroll p_Nq
            for(int n=0;n<p_Nq;++n){
              const dfloat Dr = s_DT[i][n];
              const dfloat Ds = s_DT[j][n];

              dpdr += Dr*s_Q[es][j][n];
              dpds += Ds*s_Q[es][n][i];
            }

            const dlong id = e*p_Np*p_Nfields*p_dim + fld*p_Np*p_dim + j*p_Nq + i;
              RHS[id+0*p_Np] = drdx*dpdr + dsdx*dpds;
              RHS[id+1*p_Np] = drdy*dpdr + dsdy*dpds;
          }
        }
      }
    }
  }
}
}



#define gradSurfaceTerms(sk,face,i, j)                                      \
{                                                                       \
  const dlong idM = vmapM[sk];                                          \
  const dlong idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dfloat  QM = Q[eM*p_Np*p_Nfields + fld*p_Np + vidM];             \
        dfloat  QP = Q[eP*p_Np*p_Nfields + fld*p_Np + vidP];             \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    QP = QM;                                                            \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxQx[es][j][i]  += sc*(.5f*nx*(QP-QM));                            \
  s_fluxQy[es][j][i]  += sc*(.5f*ny*(QP-QM));                            \
}

    // insPressureDirichletConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, PM, &PP);
    // PP = 2.f*PP - PM;  


@kernel void lssGradientSurfaceQuad2D(const dlong Nelements,
                                     @restrict const  dfloat *  sgeo,
                                     @restrict const  dfloat *  LIFT,
                                     @restrict const  dlong  *  vmapM,
                                     @restrict const  dlong  *  vmapP,
                                     @restrict const  int   *  EToB,
                                     const dfloat time,
                                     @restrict const  dfloat *  x,
                                     @restrict const  dfloat *  y,
                                     @restrict const  dfloat *  z,
                                     @restrict const  dfloat *  Q,
                                           @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxQx[p_NblockS][p_Nq][p_Nq];
    @shared dfloat s_fluxQy[p_NblockS][p_Nq][p_Nq];

    for(int fld=0; fld<p_Nfields; fld++){

    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_fluxQx[es][j][i] = 0.;
          s_fluxQy[es][j][i] = 0.;
        }
      }
    }


    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          gradSurfaceTerms(sk0,0,i,0     );
          gradSurfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }


    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          gradSurfaceTerms(sk1,1,p_Nq-1,j);
          gradSurfaceTerms(sk3,3,0     ,j);
        }
      }
    }


    // for each node in the element
    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong id = e*p_Np*p_Nfields*p_dim + fld*p_Np*p_dim + j*p_Nq + i;
            RHS[id+0*p_Np] += s_fluxQx[es][j][i];
            RHS[id+1*p_Np] += s_fluxQy[es][j][i];
          }
        }
      }
    }

  }
  }
}





// Computes volume contribution of div(UI)
@kernel void lssDivergenceVolumeQuad2D(const dlong Nelements,
                                      @restrict const  dfloat *  vgeo,
                                      @restrict const  dfloat *  DT,
                                      @restrict const  dfloat *  NU,
                                      @restrict const  dfloat *  GQ,
                                            @restrict  dfloat *  RHS){

  for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){  // for all elements

    @shared dfloat s_nU[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_nV[p_NblockV][p_Nq][p_Nq];
    @shared dfloat s_DT[p_Nq][p_Nq];

for(int fld=0; fld<p_Nfields; fld++){
    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es; // element in block
          if(e<Nelements){
            const dlong idg = e*p_Np*p_Nfields*p_dim + fld*p_Np*p_dim + j*p_Nq+i;
            const dlong idq = e*p_Np*p_Nfields + j*p_Nq+i;

            const dfloat nu = NU[idq + fld*p_Np];

            s_nU[es][j][i] = nu*GQ[idg+0*p_Np];
            s_nV[es][j][i] = nu*GQ[idg+1*p_Np];

            if (es==0)
              s_DT[j][i] = DT[j*p_Nq+i];
          }
        }
      }
    }

    // Make sure all node data is loaded into @shared

    for(int es=0;es<p_NblockV;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo+es;
          if(e<Nelements){
            const dlong gid = e*p_Np*p_Nvgeo+ j*p_Nq +i;
            const dfloat drdx = vgeo[gid + p_RXID*p_Np];
            const dfloat drdy = vgeo[gid + p_RYID*p_Np];
            const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
            const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

            dfloat dUdr  = 0.f, dUds  = 0.f;
            dfloat dVdr  = 0.f, dVds  = 0.f;

            #pragma unroll p_Nq
              for(int n=0;n<p_Nq;++n){
                const dfloat Dr = s_DT[i][n];
                const dfloat Ds = s_DT[j][n];

                dUdr += Dr*s_nU[es][j][n];
                dUds += Ds*s_nU[es][n][i];
                dVdr += Dr*s_nV[es][j][n];
                dVds += Ds*s_nV[es][n][i];
              }

            const dlong id = e*p_Np*p_Nfields + j*p_Nq + i;
            const dfloat dUdx = drdx*dUdr + dsdx*dUds;
            const dfloat dVdy = drdy*dVdr + dsdy*dVds;
            
            RHS[id + fld*p_Np] += (dUdx + dVdy);
            // RHS[id + fld*p_Np] = (dUdx + dVdy);
          }
        }
      }
    }
  }
  }
}





#define divSurfaceTerms(sk,face,i, j)                                      \
  {                                                                     \
  const dlong idM = vmapM[sk];                                          \
  const dlong idP = vmapP[sk];                                          \
                                                                        \
  const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];                            \
  const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];                            \
  const dfloat sJ = sgeo[sk*p_Nsgeo+p_SJID];                            \
  const dfloat invWJ = sgeo[sk*p_Nsgeo+p_WIJID];                        \
  const dfloat hinv = sgeo[sk*p_Nsgeo+p_IHID];                         \
                                                                        \
  const dlong eM = e;                                                   \
  const dlong eP = idP/p_Np;                                            \
  const int vidM = idM%p_Np;                                            \
  const int vidP = idP%p_Np;                                            \
                                                                        \
  const dlong qbaseM = eM*p_Np*p_Nfields + vidM;                        \
  const dlong qbaseP = eP*p_Np*p_Nfields + vidP;                        \
  const dlong gbaseM = eM*p_Np*p_Nfields*p_dim + fld*p_Np*p_dim + vidM; \
  const dlong gbaseP = eP*p_Np*p_Nfields*p_dim + fld*p_Np*p_dim + vidP; \
                                                                        \
  const dfloat qM = Q[qbaseM+fld*p_Np];                                   \
        dfloat qP = Q[qbaseP+fld*p_Np];                                   \
  const dfloat nuM = NU[qbaseM+fld*p_Np];                                   \
  const dfloat nuP = NU[qbaseP+fld*p_Np];                                   \
  const dfloat gxM = G[gbaseM+0*p_Np], gyM = G[gbaseM+1*p_Np];          \
        dfloat gxP = G[gbaseP+0*p_Np], gyP = G[gbaseP+1*p_Np];          \
                                                                        \
  const int bc = EToB[face+p_Nfaces*e];                                 \
  if(bc>0) {                                                            \
    qP = qM;                                                            \
    gxP = gxM;                                                            \
    gyP = gyM;                                                            \
  }                                                                     \
                                                                        \
  const dfloat sc = invWJ * sJ;                                         \
  s_fluxQ[es][j][i] += sc*(0.5*(nx*(nuP*gxP-nuM*gxM) + ny*(nuP*gyP-nuM*gyM)) - tau*hinv*(qM-qP));  \
  }

 // insVelocityDirichletConditions2D(bc, nu, time, x[idM], y[idM], nx, ny, uM, vM, &uP, &vP);
    // uP = 2.f*uP-uM;                                                     
    // vP = 2.f*vP-vM;                                                     


@kernel void lssDivergenceSurfaceQuad2D(const dlong Nelements,
                                       @restrict const  dfloat *  sgeo,
                                       @restrict const  dfloat *  LIFT,
                                       @restrict const  dlong  *  vmapM,
                                       @restrict const  dlong  *  vmapP,
                                       @restrict const  int    *  EToB,
                                       const dfloat tau,
                                       const dfloat time,
                                       @restrict const  dfloat *  x,
                                       @restrict const  dfloat *  y,
                                       @restrict const  dfloat *  z,
                                       @restrict const  dfloat * NU,
                                       @restrict const  dfloat *  Q,
                                       @restrict const  dfloat *  G,
                                             @restrict  dfloat *  RHS){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){
    // @shared storage for flux terms
    @shared dfloat s_fluxQ[p_NblockS][p_Nq][p_Nq];

for(int fld=0; fld<p_Nfields; fld++){
    
    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          s_fluxQ[es][j][i] = 0.;
        }
      }
    }


    // for all face nodes of all elements
    // face 0 & 2
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk0 = e*p_Nfp*p_Nfaces + 0*p_Nfp + i;
          dlong sk2 = e*p_Nfp*p_Nfaces + 2*p_Nfp + i;

          divSurfaceTerms(sk0,0,i,0     );
          divSurfaceTerms(sk2,2,i,p_Nq-1);
        }
      }
    }


    // face 1 & 3
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int j=0;j<p_Nq;++j;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          dlong sk1 = e*p_Nfp*p_Nfaces + 1*p_Nfp + j;
          dlong sk3 = e*p_Nfp*p_Nfaces + 3*p_Nfp + j;

          divSurfaceTerms(sk1,1,p_Nq-1,j);
          divSurfaceTerms(sk3,3,0     ,j);
        }
      }
    }


    // for each node in the element
    for(int j=0;j<p_Nq;++j){
      for(int es=0;es<p_NblockS;++es;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong e = eo + es;
          if(e<Nelements){
            const dlong id = e*p_Np*p_Nfields + j*p_Nq + i;
            RHS[id + fld*p_Np] += s_fluxQ[es][j][i];
          }
        }
      }
    }
   }
  }
}















// @kernel void lssPseudoGradientQuad2D(const dlong Nelements,
//                                @restrict const  dfloat  *  vgeo,
//                                @restrict const  dfloat  *  DT,
//                                @restrict const  dfloat  *  Q,
//                                @restrict        dfloat4 *  GQ){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){

//     @shared dfloat s_DT[p_Nq][p_Nq];
//     @shared dfloat s_q[p_Nq][p_Nq];

//     #pragma unroll p_Nfields
//     for (int fld=0; fld<p_Nfields; fld++) {

//       for(int j=0;j<p_Nq;++j;@inner(1)){
//         for(int i=0;i<p_Nq;++i;@inner(0)){
//           // prefetch DT
//           s_DT[j][i] = DT[i + p_Nq*j];

//           // prefetch q
//           const dlong id = e*p_Np*p_Nfields+j*p_Nq+i;
//           s_q[j][i] = Q[id+fld*p_Np];
//         }
//       }


//       for(int j=0;j<p_Nq;++j;@inner(1)){
//         for(int i=0;i<p_Nq;++i;@inner(0)){

//           const dlong gid = i + j*p_Nq + e*p_Np*p_Nvgeo;

//           const dfloat drdx = vgeo[gid + p_RXID*p_Np];
//           const dfloat drdy = vgeo[gid + p_RYID*p_Np];

//           const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
//           const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

//           // compute 1D derivatives
//           dfloat qr = 0, qs = 0;
//           #pragma unroll p_Nq
//           for(int n=0;n<p_Nq;++n){
//             qr += s_DT[i][n]*s_q[j][n];
//             qs += s_DT[j][n]*s_q[n][i];
//           }

//           dfloat4 gradqn;
//           gradqn.x = drdx*qr + dsdx*qs;
//           gradqn.y = drdy*qr + dsdy*qs;
//           gradqn.w = s_q[j][i];

//           const dlong id = e*p_Np*p_Nfields+j*p_Nq+i;
//           GQ[id+fld*p_Np] = gradqn;
//         }
//       }
//     }
//   }
// }


// void surfaceTerms(const int element,
//                   const int fld, 
//                   const int sk,
//                   const int face,
//                   const int i,
//                   const int j,
//                   const dfloat tau,
//                   const dfloat *sgeo,
//                   const int *vmapM,
//                   const int *vmapP,
//                   const int *EToB,
//                   const dfloat4 *gradq,
//                   dfloat s_dqdx[p_Nq][p_Nq],
//                   dfloat s_dqdy[p_Nq][p_Nq],
//                   dfloat s_rhsq[p_Nq][p_Nq]){

//   const dlong  idM = vmapM[sk];
//   const dlong  idP = vmapP[sk];

//   const dfloat nx = sgeo[sk*p_Nsgeo+p_NXID];
//   const dfloat ny = sgeo[sk*p_Nsgeo+p_NYID];
//   const dfloat WsJ = sgeo[sk*p_Nsgeo+p_WSJID];
//   const dfloat hinv= sgeo[sk*p_Nsgeo+p_IHID];

//   const dlong eM = element;
//   const dlong eP = idP/p_Np;
//   const int vidM = idM%p_Np;
//   const int vidP = idP%p_Np;

//   const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
//   const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

//   const dfloat4 gradqM = gradq[idM + fld*p_Np];
//         dfloat4 gradqP = gradq[idP + fld*p_Np];

//   int bc = EToB[face+p_Nfaces*element];
//   if(bc>0) {
//     // ellipticHomogeneousBC2D(bc, gradqM.w, gradqM.x, gradqM.y,gradqP.w, gradqP.x, gradqP.y);
    
//     // gradqP.x = 2.f*gradqP.x - gradqM.x;
//     // gradqP.y = 2.f*gradqP.y - gradqM.y;
//     // gradqP.w = 2.f*gradqP.w - gradqM.w;

//     gradqP.x = gradqM.x;
//     gradqP.y = gradqM.y;
//     gradqP.w = gradqM.w;
//   }

//   dfloat dq = gradqP.w - gradqM.w;

//   s_dqdx[j][i] += 0.5f*WsJ*nx*dq;
//   s_dqdy[j][i] += 0.5f*WsJ*ny*dq;

//   s_rhsq[j][i] -= 0.5f*WsJ*(nx*(gradqP.x+gradqM.x) +
//                             ny*(gradqP.y+gradqM.y) +
//                             tau*dq*hinv);
// }


// @kernel void lssDiffusionQuad2D(const dlong Nelements,
//                                  @restrict const  dlong *  elementList,
//                                  @restrict const  dlong *  vmapM,
//                                  @restrict const  dlong *  vmapP,
//                                  const dfloat tau,
//                                  @restrict const  dfloat *  vgeo,
//                                  @restrict const  dfloat *  sgeo,
//                                  @restrict const  int   *  EToB,
//                                  @restrict const  dfloat *  DT,
//                                  @restrict const  dfloat *  LIFT,
//                                  @restrict const  dfloat *  visc,
//                                  @restrict const  dfloat4 *  gradq,
//                                  @restrict dfloat  *  Aq){

//   for(dlong e=0;e<Nelements;++e;@outer(0)){

//     @shared dfloat s_dqdx[p_Nq][p_Nq];
//     @shared dfloat s_dqdy[p_Nq][p_Nq];
//     @shared dfloat s_rhsq[p_Nq][p_Nq];
//     @shared dfloat s_DT[p_Nq][p_Nq];

//     @exclusive dlong element;

// #pragma unroll p_Nfields
//     for (int fld=0; fld<p_Nfields; fld++) {

//     // loop over slabs
//     for(int j=0;j<p_Nq;++j){
//       for(int i=0;i<p_Nq;++i;@inner(0)){
//         element = elementList[e];

//         // assume that this stores (q, qx, qy, qz) as dfloat4
//         const dfloat4 gradqn = gradq[element*p_Np*p_Nfields +j*p_Nq+i + fld*p_Np];

//         const dlong gid = i + j*p_Nq + element*p_Np*p_Nvgeo;
//         dfloat JW = vgeo[gid + p_JWID*p_Np];

//         s_dqdx[j][i] = JW*gradqn.x;
//         s_dqdy[j][i] = JW*gradqn.y;
//         // lamda=0
//         s_rhsq[j][i] = 0.0;

//         s_DT[j][i] = DT[j*p_Nq+i];
//       }
//     }


//     // loop over faces to add pseudo-gradient

//     // face 0 & 2
//     for(int i=0;i<p_Nq;++i;@inner(0)){
//       dlong sk0 = element*p_Nfp*p_Nfaces + 0*p_Nfp + i ;
//       dlong sk2 = element*p_Nfp*p_Nfaces + 2*p_Nfp + i ;

//       //      surfaceTerms(sk0,0,i,0);
//       surfaceTerms(element, fld, sk0, 0, i, 0, tau, sgeo, vmapM, vmapP, EToB, gradq, s_dqdx, s_dqdy, s_rhsq);

//       //      surfaceTerms(sk2,2,i,p_Nq-1);
//       surfaceTerms(element, fld, sk2, 2, i, p_Nq-1, tau, sgeo, vmapM, vmapP, EToB, gradq, s_dqdx, s_dqdy, s_rhsq);
//     }


//     // face 1 & 3
//     for(int j=0;j<p_Nq;++j;@inner(0)){
//       dlong sk1 = element*p_Nfp*p_Nfaces + 1*p_Nfp + j;
//       dlong sk3 = element*p_Nfp*p_Nfaces + 3*p_Nfp + j;

//       //      surfaceTerms(sk1,1,p_Nq-1,j);
//       surfaceTerms(element, fld, sk1, 1, p_Nq-1, j, tau, sgeo, vmapM, vmapP, EToB, gradq, s_dqdx, s_dqdy, s_rhsq);

//       //      surfaceTerms(sk3,3,0,j);
//       surfaceTerms(element, fld, sk3, 3, 0, j, tau, sgeo, vmapM, vmapP, EToB, gradq, s_dqdx, s_dqdy, s_rhsq);
//     }


//     // prescale by geofacs
//     for(int j=0;j<p_Nq;++j){
//       for(int i=0;i<p_Nq;++i;@inner(0)){
//         // does need the nasty geofacs
//         const dlong gid = i + j*p_Nq + element*p_Np*p_Nvgeo;

//         const dfloat drdx = vgeo[gid + p_RXID*p_Np];
//         const dfloat drdy = vgeo[gid + p_RYID*p_Np];
//         const dfloat dsdx = vgeo[gid + p_SXID*p_Np];
//         const dfloat dsdy = vgeo[gid + p_SYID*p_Np];

//         // chain rule (need to scale by wei
//         const dfloat dqdx = s_dqdx[j][i];
//         const dfloat dqdy = s_dqdy[j][i];

//         s_dqdx[j][i] = (drdx*dqdx + drdy*dqdy);
//         s_dqdy[j][i] = (dsdx*dqdx + dsdy*dqdy);
//       }
//     }


//     // loop over slabs
//     for(int j=0;j<p_Nq;++j){
//       for(int i=0;i<p_Nq;++i;@inner(0)){
//         dfloat dr = 0, ds = 0;

//         #pragma unroll p_Nq
//           for(int n=0;n<p_Nq;++n){
//             dr += s_DT[n][i]*s_dqdx[j][n];
//             ds += s_DT[n][j]*s_dqdy[n][i];
//           }

//         const dlong gid = i + j*p_Nq + element*p_Np*p_Nvgeo;
//         dfloat invJW    = vgeo[gid + p_IJWID*p_Np];

//         const dlong id = element*p_Np*p_Nfields + j*p_Nq + i;
//         Aq[id + fld*p_Np] = -visc[id + fld*p_Np]*invJW*(s_rhsq[j][i]  + dr + ds);
//       }
//     }
//     }
//   }
// }
