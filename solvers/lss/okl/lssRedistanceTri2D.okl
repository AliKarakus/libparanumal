/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
@kernel void lssRedistanceVolumeTri2D(const dlong Nelements,
                                  const  dfloat    t,
                                  @restrict const  dfloat *  vgeo,
                                  @restrict const  dfloat *  DT,
                                  @restrict const  dfloat *  q,
                                  @restrict        dfloat *  gradq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared dfloat s_qp[p_Np];
    @shared dfloat s_qm[p_Np];

    for(int n=0;n<p_Np;++n;@inner(0)){
      const dlong id = e*p_Np*p_Nfields + n;
      s_qp[n]          = q[id + 0*p_Np];
      s_qm[n]          = q[id + 1*p_Np];
    }

    for(int n=0;n<p_Np;++n;@inner(0)){
      // prefetch geometric factors (constant on triangle)
      const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
      const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
      const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
      const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

      dfloat dqpdr = 0, dqpds = 0; 
      dfloat dqmdr = 0, dqmds = 0; 

      for(int i=0;i<p_Np;++i){
        const dfloat qpn = s_qp[i];
        const dfloat qmn = s_qm[i];
        const dfloat dr  = DT[n+i*p_Np+0*p_Np*p_Np];
        const dfloat ds  = DT[n+i*p_Np+1*p_Np*p_Np];

        dqpdr += dr*qpn;
        dqpds += ds*qpn;
 
        dqmdr += dr*qmn;
        dqmds += ds*qmn;
      }

      const dfloat dqpdx = drdx*dqpdr + dsdx*dqpds;
      const dfloat dqpdy = drdy*dqpdr + dsdy*dqpds;
      const dfloat dqmdx = drdx*dqmdr + dsdx*dqmds;
      const dfloat dqmdy = drdy*dqmdr + dsdy*dqmds;

      const dlong id = e*p_Np*p_Nfields*p_dim + n;
      gradq[id + 0*p_Np] = -dqpdx;
      gradq[id + 1*p_Np] = -dqpdy;
      gradq[id + 2*p_Np] = -dqmdx;
      gradq[id + 3*p_Np] = -dqmdy;
    }
  }
}


// batch process elements
@kernel void lssRedistanceSurfaceTri2D(const dlong Nelements,
                                  @restrict const  dfloat *  sgeo,
                                  @restrict const  dfloat *  LIFT,
                                  @restrict const  dlong  *  vmapM,
                                  @restrict const  dlong  *  vmapP,
                                  @restrict const  int    *  EToB,
                                            const  dfloat time,
                                  @restrict const  dfloat *  x,
                                  @restrict const  dfloat *  y,
                                  @restrict const  dfloat *  z,
                                  @restrict const  dfloat *  q,
                                  @restrict const  dfloat *  gradq,
                                  @restrict dfloat *  rhsq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_ppf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_ppf2[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qpf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qpf2[p_NblockS][p_NfacesNfp];

    @shared dfloat s_pmf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_pmf2[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qmf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qmf2[p_NblockS][p_NfacesNfp];


    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_NfacesNfp){
            // find face that owns this node
            const int face = n/p_Nfp;

            // load surface geofactors for this face
            const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx   = sgeo[sid+p_NXID];
            const dfloat ny   = sgeo[sid+p_NYID];
            const dfloat sJ   = sgeo[sid+p_SJID];
            const dfloat invJ = sgeo[sid+p_IJID];

            // indices of negative and positive traces of face node
            const dlong id  = e*p_Nfp*p_Nfaces + n;
            const dlong idM = vmapM[id];
            const dlong idP = vmapP[id];
            // load traces
            const dlong eM = e;
            const dlong eP = idP/p_Np;
            const int vidM = idM%p_Np;
            const int vidP = idP%p_Np;

            const dlong qbaseM = eM*p_Np*p_Nfields + vidM;
            const dlong qbaseP = eP*p_Np*p_Nfields + vidP;

            // load traces
            const dfloat qpM = q[qbaseM + 0*p_Np];  dfloat qpP = q[qbaseP + 0*p_Np];
            const dfloat qmM = q[qbaseM + 1*p_Np];  dfloat qmP = q[qbaseP + 1*p_Np];

            // apply boundary condition
            const int bc = EToB[face+p_Nfaces*e];
            // if(bc>0){
            //   lssDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, qM, &qP);
            // }

           const dfloat sc = invJ*sJ; 
            // simple upwind
            dfloat unx = 0.0, dnx = 1.0; 
            dfloat uny = 0.0, dny = 1.0; 
            if(nx>= 0){unx = 1.0, dnx = 0.0;}
            if(ny>= 0){uny = 1.0, dny = 0.0;}

            s_ppf1[es][n]= sc*nx*( (dnx*qpM  + unx*qpP));
            s_ppf2[es][n]= sc*nx*( (unx*qpM  + dnx*qpP));
            s_qpf1[es][n]= sc*ny*( (dny*qpM  + uny*qpP));
            s_qpf2[es][n]= sc*ny*( (uny*qpM  + dny*qpP));

            s_pmf1[es][n]= sc*nx*( (dnx*qmM  + unx*qmP));
            s_pmf2[es][n]= sc*nx*( (unx*qmM  + dnx*qmP));
            s_qmf1[es][n]= sc*ny*( (dny*qmM  + uny*qmP));
            s_qmf2[es][n]= sc*ny*( (uny*qmM  + dny*qmP));
          }
        }
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete


    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        const dlong e = eo + es;
        if(e<Nelements){
          if(n<p_Np){
            dfloat pp1 = 0.f, pp2 = 0.f; 
            dfloat qp1 = 0.f, qp2 = 0.f;   

            dfloat pm1 = 0.f, pm2 = 0.f; 
            dfloat qm1 = 0.f, qm2 = 0.f;   
            // 
            #pragma unroll p_NfacesNfp
              for(int m=0;m<p_NfacesNfp;++m){
                const dfloat L = LIFT[n+m*p_Np];
                pp1 += L*s_ppf1[es][m];
                pp2 += L*s_ppf2[es][m];
                qp1 += L*s_qpf1[es][m];
                qp2 += L*s_qpf2[es][m];

                pm1 += L*s_pmf1[es][m];
                pm2 += L*s_pmf2[es][m];
                qm1 += L*s_qmf1[es][m];
                qm2 += L*s_qmf2[es][m];
              }

            // ids on gradient
            const dlong idg = e*p_Np*p_Nfields*p_dim + n;
            const dfloat dqpdx = gradq[idg + 0*p_Np];
            const dfloat dqpdy = gradq[idg + 1*p_Np];
            const dfloat dqmdx = gradq[idg + 2*p_Np];
            const dfloat dqmdy = gradq[idg + 3*p_Np];

            pp1 +=  dqpdx; pp2 +=  dqpdx; 
            qp1 +=  dqpdy; qp2 +=  dqpdy;

            pm1 +=  dqmdx; pm2 +=  dqmdx; 
            qm1 +=  dqmdy; qm2 +=  dqmdy;

            const dfloat pP = 0.5f*(pp1+pp2); 
            const dfloat pQ = 0.5f*(qp1+qp2); 

            const dfloat mP = 0.5f*(pm1+pm2); 
            const dfloat mQ = 0.5f*(qm1+qm2); 
           
            // back to original id 
            const dlong id = e*p_Np*p_Nfields + n;
            // LLF Numerical Hamiltonian
            rhsq[id + 0*p_Np] =  -(( sqrt( pP*pP+pQ*pQ ))-0.5f*(pp1-pp2)-0.5*(qp1-qp2));
            rhsq[id + 1*p_Np] =  -(( sqrt( mP*mP+mQ*mQ ))-0.5f*(pm1-pm2)-0.5*(qm1-qm2));
          }
        }
      }
    }
  }
}