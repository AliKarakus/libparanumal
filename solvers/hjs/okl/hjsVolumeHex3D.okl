/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// in weak form 
@kernel void hjsVolumeHex3D(const dlong Nelements,
                            @restrict const  dfloat *  vgeo,
                            @restrict const  dfloat *  DT,
                            const dfloat time, 
                            @restrict const  dfloat *  x,
                            @restrict const  dfloat *  y,
                            @restrict const  dfloat *  z,
                            @restrict const  dfloat *  q,
                            @restrict dfloat *  gradq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)) {
    // Hold Flux Vector on Shared
    @shared dfloat s_qrx[p_Nq][p_Nq];
    @shared dfloat s_qry[p_Nq][p_Nq];
    @shared dfloat s_qrz[p_Nq][p_Nq];
    
    @shared dfloat s_qsx[p_Nq][p_Nq];
    @shared dfloat s_qsy[p_Nq][p_Nq];
    @shared dfloat s_qsz[p_Nq][p_Nq];

    @shared dfloat s_qtx[p_Nq][p_Nq];
    @shared dfloat s_qty[p_Nq][p_Nq];
    @shared dfloat s_qtz[p_Nq][p_Nq];

    @shared dfloat s_DT[p_Nq][p_Nq];

    @exclusive dfloat r_dqdx[p_Nq], r_dqdy[p_Nq], r_dqdz[p_Nq];

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        s_DT[j][i] = DT[i+j*p_Nq];

        #pragma unroll p_Nq
          for(int k=0;k<p_Nq;++k){
            r_dqdx[k] = 0.f; 
            r_dqdy[k] = 0.f; 
            r_dqdz[k] = 0.f; 
          }
      }
    }

    @barrier("local");

    #pragma unroll p_Nq
    for(int k=0;k<p_Nq;++k){

      //fetch slice
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat rx = vgeo[gid + p_RXID*p_Np];
          const dfloat ry = vgeo[gid + p_RYID*p_Np];
          const dfloat rz = vgeo[gid + p_RZID*p_Np];
          const dfloat sx = vgeo[gid + p_SXID*p_Np];
          const dfloat sy = vgeo[gid + p_SYID*p_Np];
          const dfloat sz = vgeo[gid + p_SZID*p_Np];
          const dfloat tx = vgeo[gid + p_TXID*p_Np];
          const dfloat ty = vgeo[gid + p_TYID*p_Np];
          const dfloat tz = vgeo[gid + p_TZID*p_Np];
          const dfloat JW = vgeo[gid + p_JWID*p_Np];

          const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
          const dfloat qn = q[id];

          s_qrx[j][i] = JW*rx*qn;
          s_qry[j][i] = JW*ry*qn;
          s_qrz[j][i] = JW*rz*qn;

          s_qsx[j][i] = JW*sx*qn;
          s_qsy[j][i] = JW*sy*qn;
          s_qsz[j][i] = JW*sz*qn;

          s_qtx[j][i] = JW*tx*qn;
          s_qty[j][i] = JW*ty*qn;
          s_qtz[j][i] = JW*tz*qn;
        }
      }

     @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          #pragma unroll p_Nq
            for (int n=0;n<p_Nq;n++) {
              const dfloat Dr = s_DT[n][i];
              const dfloat Ds = s_DT[n][j];
              const dfloat Dt = s_DT[k][n];

              r_dqdx[k] += Dr*s_qrx[j][n];
              r_dqdy[k] += Dr*s_qry[j][n];
              r_dqdz[k] += Dr*s_qrz[j][n];

              r_dqdx[k] += Ds*s_qsx[n][i];
              r_dqdy[k] += Ds*s_qsy[n][i];
              r_dqdz[k] += Ds*s_qsz[n][i];

              r_dqdx[n] += Dt*s_qtx[j][i];
              r_dqdy[n] += Dt*s_qty[j][i];
              r_dqdz[n] += Dt*s_qtz[j][i];
            }
        }
      }

      // @barrier("local");
    } //k loop

//write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        #pragma unroll p_Nq
        for(int k=0;k<p_Nq;++k){
          const dlong gid = e*p_Np*p_Nvgeo+ k*p_Nq*p_Nq + j*p_Nq +i;
          const dfloat invJW = vgeo[gid + p_IJWID*p_Np];

          const dlong id = e*p_Np*p_dim + k*p_Nq*p_Nq + j*p_Nq + i;
          gradq[id + 0*p_Np] = -invJW*r_dqdx[k];
          gradq[id + 1*p_Np] = -invJW*r_dqdy[k];
          gradq[id + 2*p_Np] = -invJW*r_dqdz[k];
        }
      }
    }
  }
}