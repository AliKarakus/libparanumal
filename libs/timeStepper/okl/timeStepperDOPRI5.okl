/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

@kernel void dopri5RkStage(const dlong N,
                           const int rk,
                           const dfloat dt,
                           @restrict const  dfloat *  rkA,
                           @restrict const  dfloat *  q,
                           @restrict const  dfloat *  rkrhsq,
                           @restrict dfloat *  rkq){
#define p_Nreads 1
#define p_blkSize 256
  
  for(dlong n0=0;n0<N;n0+=p_Nreads*p_blkSize;@outer){
    @shared dfloat s_rkA[7];
    for(int t=0;t<p_blkSize;++t;@inner){
      if(t<rk){
	s_rkA[t] = dt*rkA[7*rk+t];
      }
    }

    for(int t=0;t<p_blkSize;++t;@inner){
      dlong n = t + n0;
      //#pragma unroll p_Nreads
      for(int read=0;read<p_Nreads;++read){
	if(n<N){

	  dfloat r_q = q[n];

	  for (int i=0;i<rk;i++)
	    r_q += s_rkA[i]*rkrhsq[n+i*N];
	  
	  rkq[n] = r_q;
	}
	n+=p_blkSize;
      }
    }
  }
  
}

@kernel void dopri5RkUpdate(const dlong N,
                            const int rk,
                            const dfloat dt,
                            @restrict const  dfloat *  rkA,
                            @restrict const  dfloat *  rkE,
                            @restrict const  dfloat *  q,
                            @restrict const  dfloat *  rhsq,
                            @restrict dfloat *  rkrhsq,
                            @restrict dfloat *  rkq,
                            @restrict dfloat *  rkerr){


#define p_Nreads 2
#define p_blkSize 256
  
  for(dlong n0=0;n0<N;n0+=p_Nreads*p_blkSize;@outer){
    @shared dfloat s_rkA[7], s_rkE[7];

    for(int t=0;t<p_blkSize;++t;@inner){
      if(t<7){
	if(rk==6){
	  s_rkA[t] = dt*rkA[7*rk+t];
	  s_rkE[t] = dt*rkE[t];
	}
      }
    }
      
    for(int t=0;t<p_blkSize;++t;@inner){
      dlong n = t + n0;
      //#pragma unroll p_Nreads
      for(int read=0;read<p_Nreads;++read){
	
	if(n<N){
	  if(rk<6){
	    dfloat r_rhsq = rhsq[n];
	    rkrhsq[n+rk*N] = r_rhsq;
	  }
	  else{ //last stage
	    dfloat r_rhsq = rhsq[n];
	    dfloat r_q = q[n];
	    dfloat r_rkerr = 0.;
	    for (int i=0;i<6;i++) {
	      dfloat rkrhsqn = rkrhsq[n+i*N];
	      r_q     += s_rkA[i]*rkrhsqn;
	      r_rkerr += s_rkE[i]*rkrhsqn;
	    }
	    r_q     += s_rkA[6]*r_rhsq;
	    r_rkerr += s_rkE[6]*r_rhsq;
	    
	    rkq[n] = r_q;
	    rkerr[n] = r_rkerr;
	    rkrhsq[n+rk*N] = r_rhsq;
	  }
	}

	n+=p_blkSize;
      }
    }
  }
  
}

@kernel void dopri5RkPmlUpdate(const dlong N,
                            const int rk,
                            const dfloat dt,
                            @restrict const  dfloat *  rkA,
                            @restrict const  dfloat *  q,
                            @restrict const  dfloat *  rhsq,
                            @restrict dfloat *  rkrhsq,
                            @restrict dfloat *  rkq){

  // Runge Kutta intermediate stage
  for(dlong n=0;n<N;++n;@tile(256,@outer,@inner)){

    dfloat r_rhsq = rhsq[n];

    if (rk==6) { //last stage
      dfloat r_q = q[n];
      for (int i=0;i<6;i++) {
        r_q     += dt*rkA[7*rk + i]*rkrhsq[n+i*N];
      }
      r_q     += dt*rkA[7*rk + 6]*r_rhsq;

      rkq[n] = r_q;
    }

    rkrhsq[n+rk*N] = r_rhsq;
  }
}

@kernel void dopri5ErrorEstimate(const dlong N,
                                 const dfloat ATOL,
                                 const dfloat RTOL,
                                 @restrict const  dfloat *  q,
                                 @restrict const  dfloat *  rkq,
                                 @restrict const  dfloat *  rkerr,
                                 @restrict dfloat *  errtmp){

#if USE_HIP==1
#define p_NWARP 4
#define p_SIMD 64
#else
#define p_NWARP 8
#define p_SIMD 32
#endif

  for(dlong b=0;b<(N+p_blockSize-1)/p_blockSize;++b;@outer(0)){
    @shared volatile dfloat s_err[p_NWARP];
    
    for(int t=0;t<p_blockSize;++t;@inner(0)){
      dfloat res = 0;
      
      const dlong id = t + p_blockSize*b;
      if (id<N) {
        const dfloat   qn = fabs(  q[id]);
        const dfloat rkqn = fabs(rkq[id]);
        const dfloat qmax = (qn>rkqn) ? qn : rkqn;
        dfloat sk = ATOL + RTOL*qmax;

	const dfloat tmp = (rkerr[id]/sk);
	res = tmp*tmp;
      }
      
#if USE_HIP==1
      res += __shfl_down(res, 32, p_SIMD);
      res += __shfl_down(res, 16, p_SIMD);
      res += __shfl_down(res,  8, p_SIMD);
      res += __shfl_down(res,  4, p_SIMD);
      res += __shfl_down(res,  2, p_SIMD);
      res += __shfl_down(res,  1, p_SIMD);
#else
      res += __shfl_down_sync(0xFFFFFFFF, res, 16, p_SIMD);
      res += __shfl_down_sync(0xFFFFFFFF, res,  8, p_SIMD);
      res += __shfl_down_sync(0xFFFFFFFF, res,  4, p_SIMD);
      res += __shfl_down_sync(0xFFFFFFFF, res,  2, p_SIMD);
      res += __shfl_down_sync(0xFFFFFFFF, res,  1, p_SIMD);
#endif
      if(t%p_NWARP==0)
	s_err[t/p_NWARP] = res;   
    }


    for(int t=0;t<p_blockSize;++t;@inner(0)){
      if(t<p_SIMD){
	dfloat res = (t<p_NWARP) ? s_err[t]:0;

#if USE_HIP==1
	res += __shfl_down(res,  2, p_SIMD);
	res += __shfl_down(res,  1, p_SIMD);
#else
	unsigned int MASK = 0xFFFFFFFF;
	res += __shfl_down_sync(MASK, res,  4, p_SIMD);
	res += __shfl_down_sync(MASK, res,  2, p_SIMD);
	res += __shfl_down_sync(MASK, res,  1, p_SIMD);
#endif
	if(t==0)
	  errtmp[b] = s_err[0] + s_err[1];
      }
    }
  }
}
